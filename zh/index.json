[{"content":"国家/地区: 中国 新华社 习近平接受外国新任驻华大使递交国书 - 2025-07-25T04:07:52+00:00\n新华社北京7月25日电（记者邵艺博、曹嘉玥）7月25日上午，国家主席习近平在北京人民大会堂接受16位驻华大使递交国书。　人民大会堂北门外，礼兵庄严列队，迎宾号角吹响。使节们相继抵达，穿过旗阵，沿汉白玉台阶拾级而上。　在巨幅壁画《江山如此多娇》前，习近平分别接受使节们递交国书，并同他们一一合影。　他们是：越南驻华大使范清平、巴拿马驻华大使雷鸣、多米尼加驻华大使戈麦斯、阿尔巴尼亚驻华大使波达、新西兰驻华大使乔文博、巴布亚新几内亚驻华大使卡姆巴内、安哥拉驻华大使艾伦、埃及驻华大使纳兹米、尼加拉瓜驻华大使孔乐然、伊朗驻华大使法兹里、智利驻华大使阿里亚兰、乌克兰驻华大使涅奇塔伊洛、贝宁驻华大使阿贾巴、美国驻华大使庞德伟、以色列驻华大使贝以理、南苏丹驻华大使莫里斯。习近平还接见了上海合作组织秘书长叶尔梅克巴耶夫。　仪式结束后，习近平在北京厅对使节们发表讲话。　习近平欢迎使节们来华履新，请他们转达对各自国家领导人和人民的良好祝愿，希望使节们全面、深入了解中国，为深化中国同各国友谊、增进中国同世界交往作出积极贡献。　习近平指出，中国始终珍视同世界各国人民的友好情谊，愿在相互尊重、平等相\u0026hellip;\n新华社快讯：习近平接受外国新任驻华大使递交国书 - 2025-07-25T04:01:42+00:00\n新华社快讯：7月25日上午，国家主席习近平在北京人民大会堂接受16位驻华大使递交国书。\u0026hellip;\n山东东平：医养结合推动“品质养老” - 2025-07-25T03:56:08+00:00\n炎炎夏日，位于山东省泰安市东平县梯门镇的东平县精神卫生中心内一片清凉。穿过大厅，病房区里的患者们正跟着大屏幕做最近流行的手势舞，气氛轻松愉快。 老人在东平县失能老人集中供养中心进行认知障碍训练。（受访单位供图） 与普通精神卫生机构不同，这里兼具养老功能，有215名特困精神障碍患者在此得到养老服务。 “我母亲今年68岁，患有双相情感障碍十余年。她以前在养老机构，由于缺乏精神疾病方面的专业治疗，情绪不稳定，让我十分发愁。这里既能稳定她的病情，又有良好的养老服务，我终于能松口气了。”患者家属林宁说。 为突破传统养老模式局限，东平县通过资源整合与机制重构，实施分类、分区域、分情况供养，推动医养结合多元化、专业化发展。东平县副县长乔强介绍，该县将县域内的老人按照自理能力、健康状况等进行分类，打破“一镇一院”布局，环东平湖打造“东西南北”4个集中供养片区，将14处乡镇（街道）的养老和医疗资源整合为6处区域性养老服务中心和1处精神卫生中心，全面保障特困人员照护需求。 在东平县失能老人集中供养中心，老人们在卧床休息，有的用着理疗仪，有的老人正在智能床体的辅助下翻身……中心与大羊镇卫生院“\u0026hellip;\n柬泰冲突造成一名柬埔寨平民死亡 - 2025-07-25T03:55:46+00:00\n新华社金边7月25日电（记者吴长伟）柬埔寨奥多棉吉省副省长梅密皮代25日在电话中告诉新华社记者，24日泰方向柬埔寨境内发射炮弹，造成奥多棉吉省一名平民死亡，5人受伤。 梅密皮代说：“截至25日上午，战斗仍在继续。居住在边境附近的2900多户家庭已被疏散到安全避难所。” 柬埔寨国防部副国务秘书兼发言人马莉淑洁达25日上午在新闻发布会上说，泰国军队使用重型武器、F-16战斗机以及集束炸弹袭击了柬埔寨奥多棉吉省和柏威夏省多个地点。\u0026hellip;\n健康提醒：关于基孔肯雅热，个人如何做好防护？ - 2025-07-25T03:38:49+00:00\n近期，我国南方个别城市发生基孔肯雅热输入疫情并引发本地传播。　中国疾控中心研究员段蕾蕾表示，基孔肯雅热可防可控可治，主要通过伊蚊叮咬传播，没有人传人迹象。临床表现为发热、关节痛等。有疫情的地方要迅速开展灭蚊行动，降低蚊媒密度。　个人如何做好防护？段蕾蕾建议，白天外出时穿着浅色长袖衣裤，如果有裸露的皮肤要涂抹含避蚊胺和避蚊酯的驱蚊产品来驱蚊，避免在树荫和草丛等蚊虫密集的地方长时间停留；家中要安装纱门和纱窗，晚上睡觉时要使用蚊帐，必要时要配合电蚊拍和蚊香液灭蚊。　“个人如果出现高热、关节剧痛、皮疹的情况，尤其是有蚊虫叮咬史或疫区旅居史者，要立即就医治疗。”段蕾蕾提醒。　新华社音视频部制作\u0026hellip;\n全文丨共同守护人类文明瑰宝——新时代中国文化遗产保护的理念与实践 - 2025-07-25T03:31:01+00:00\n站在新的历史起点上，中国充分彰显文化遗产在文化传承发展中的独特优势，用文物的力量，筑牢文明的根基，书写文化的未来。 目 录 前 言 第一章 中国文化遗产保护的理念立场 1.1 契合时代需求 1.2 彰显文化魅力 1.3 凝聚中国智慧 第二章 中国文化遗产保护的生动实践 2.1 守护文明根脉 2.2 挖掘当代价值 2.3 激发科技动能 2.4 成果人民共享 第三章 “OPEN”——中国文化遗产保护的创新范式 3.1 贡献原创（Originality Contribution） 3.2 保护第一（Prioritizing Protection） 3.3 强化协同（Enhancing Collaboration） 3.4 合力保障（Necessary Guarantee） 第四章 中国文化遗产保护的世界意义 4.1 守护全人类共同珍宝的天下情怀 4.2 助力全球文化遗产保护的中国贡献 4.3 维护人类文明多样性的中国主张 结 语 编写说明 前 言 文化遗产是人类文明的璀璨瑰宝。它承载着一个国家的辉煌历史和灿烂文化，维系着一个民族的情\u0026hellip;\n新华社国家高端智库发布《共同守护人类文明瑰宝——新时代中国文化遗产保护的理念与实践》智库报告 - 2025-07-25T03:11:36+00:00\n新华社郑州7月25日电（记者刘怀丕、袁月明）新华社国家高端智库25日在河南郑州举行的上海合作组织媒体智库峰会上发布了《共同守护人类文明瑰宝——新时代中国文化遗产保护的理念与实践》智库报告。 报告全文约2.3万字，从“理念立场”“生动实践”“创新范式”“世界意义”四个方面，对新时代中国文化遗产保护工作进行深入解读。 报告认为，党的十八大以来，中国共产党站在民族复兴和文明传承的战略高度，全面加强文化遗产保护传承工作，坚持“保护第一”理念，推进整体性、系统性保护，妥善处理保护与发展的关系，是发展所需、民心所向、世界所倡。 报告指出，中国坚持在守护文明根脉的同时挖掘当代价值，坚持在科技赋能的同时让人民共享成果，不断满足人民群众的美好生活需要。中国文化遗产保护工作取得历史性成就，文化遗产蕴含的创新创造基因被不断激活，一幅古今辉映、气势恢宏的新时代文化长卷徐徐展开。 报告提炼出中国文化遗产保护的“OPEN”创新范式，即：贡献原创（Originality Contribution）、保护第一（Prioritizing Protection）、强化协同（Enhancing Collabor\u0026hellip;\n新华社权威快报丨《共同守护人类文明瑰宝——新时代中国文化遗产保护的理念与实践》智库报告发布 - 2025-07-25T03:11:31+00:00\n7月25日，新华社国家高端智库在河南郑州举行的上海合作组织媒体智库峰会上发布《共同守护人类文明瑰宝——新时代中国文化遗产保护的理念与实践》智库报告。 报告认为，党的十八大以来，中国共产党站在民族复兴和文明传承的战略高度，全面加强文化遗产保护传承工作，坚持“保护第一”理念，推进整体性、系统性保护，妥善处理保护与发展的关系，是发展所需、民心所向、世界所倡。中国坚持在守护文明根脉的同时挖掘当代价值，坚持在科技赋能的同时让人民共享成果，不断满足人民群众的美好生活需要。 报告强调，中国素来以负责任态度参与文化遗产领域全球治理，积极同联合国等国际组织开展紧密合作，通过契约共践、技术共享、人才共育、挑战共克、发展共赢，构建全球文化遗产保护共同体，为世界多国文化遗产保护提供中国智慧、中国方案。 报告全文约2.3万字，通过相关网站、期刊、社交媒体等平台以中英文面向全球发布。 记者：刘怀丕、袁月明 海报制作：栾若卉 新华社国内部出品\u0026hellip;\nVLOG丨文明奇妙游·上合媒体智库峰会有一道“时空任意门” - 2025-07-25T03:10:27+00:00\n肇兴于斯、灿烂于斯。中原大地，五千多年文明赓续绵延、大开大合的历史舞台。　上海合作组织媒体智库峰会于7月23日到27日在河南郑州举行。来自上海合作组织26个国家的近200家主流媒体、知名智库、政府机构以及联合国、上海合作组织秘书处等国际和地区组织的400多名代表参会，在这里谈合作、话共识。　奇妙的是，会场内有一条“出彩中原文化长廊”暗藏“时空任意门”——一步迈入，秒变“文化体验官”。　跟随新华社记者的镜头，一起推开这扇门，穿越千年。　记者：周阳、梁婉珊　摄像：王宏达、杨志刚、姜亮、杨静、郝晓江、陈泽鹏　新华社音视频部制作\u0026hellip;\n新研究揭示大脑注意力切换机制 - 2025-07-25T03:09:28+00:00\n新华社耶路撒冷7月24日电（记者王卓伦 路一凡）人们以为自己是在持续、稳定地关注周围世界，但实际上，大脑处理感官信息的方式并非一条“连续流”，而是通过有规律的节奏性跳跃进行关注切换。以色列耶路撒冷希伯来大学最新研究提出，这种名为“注意力采样”的机制，有助于大脑在信息过载情况下高效切换注意焦点。　在近期发表于英国《趋势－认知科学》期刊的研究报告中，研究人员认为，大脑处理视觉信息的过程，有点像大脑在快速抓拍快照，而不是观看一段连续的视频。若需在两个目标之间分配注意力，则这一频率会以每秒4次的节奏在两个目标间交替进行。这种节奏性的注意力切换，成为大脑在多目标竞争情境下的默认处理策略。至于这一节奏由谁“指挥”，目前尚无定论。　不同视觉神经元群体在处理多个刺激时存在“争夺处理资源”的现象。研究人员认为，注意力采样机制，正是大脑通过节奏性切换在多个视觉刺激输入之间寻找平衡的一种方式。　研究人员表示，这可能是一种大脑普遍的感知原则，不仅适用于视觉系统，也可能适用于听觉、触觉等其他感官系统。随着人类面临的信息刺激日益复杂和密集，理解大脑如何在不同感官输入信息之间“跳跃聚焦”的能力，将有助于\u0026hellip;\n第一财经 刚“摘帽”不到两月，先锋新材前实控人卢先锋遭证监会立案 - 2025-07-25T04:05:09+00:00\n25日，先锋新材大幅低开，截至午盘收盘，跌13.02%，股价报收3.34元。 7月24日晚间，先锋新材（300163.SZ）发布公告称，公司及前控股股东、实际控制人卢先锋因涉嫌信息披露违法违规，被中国证监会立案调查。值得注意的是，这距离先锋新材完成“摘帽”（撤销其他风险警示）仅过去50多天。25日，先锋新材大幅低开，截至午盘收盘，跌13.02%，股价报收3.34元。 6月3日公告显示，因原控股股东、实控人卢先锋部份股权被司法拍卖导致公司控制权真空。5月29日，卢先锋被司法拍卖的2250万股股份完成过户，持股比例从8.39%被动减少至3.65%，公司由此进入无控股股东、无实控人状态。 此前先锋新材因2021-2023年连续三年扣非净利润为负，且2023年审计报告显示公司持续经营能力存在不确定性，于2024年5月被实施其他风险警示（ST）。为摆脱退市风险，公司通过资产重组剥离亏损业务，并在2025年5月底刚刚成功摘帽。 值得一提的是，先锋新材在2021-2024年连续四年净利润亏损后，2025年一季度业绩突然“逆袭”，营收同比增长34.90%至8515.52万元，归母净利润\u0026hellip;\n近200家“全勤生”，4个首次，第八届进博会招展已取得实质性进展 - 2025-07-25T04:02:20+00:00\n截至目前，签约展览面积超过33万平方米，170家企业和27家机构成为签约参展的八届“全勤生”。 当前，国际形势变乱交织、经贸秩序遭受重创，不稳定性、不确定性增加，办好第八届进博会（中国国际进口博览会）具有特殊重要意义。 临近倒计时100天之际，中国国际进口博览局党委书记、副局长吴政平在7月25日举行的新闻通气会上表示，第八届进博会将于11月5日至10日在上海举行。国家综合展邀请确认工作基本完成。已有超过50个国家和国际组织确认参加国家展，其中瑞典、阿联酋等国将担任主宾国，吉尔吉斯斯坦将首次参展。本届进博会还将新增国内外友好城市合作题材，打造特色联合展台，为中外友城搭建全方位展示平台。 企业商业展招展工作也已取得实质性进展。截至目前，签约展览面积超过33万平方米，170家企业和27家机构成为签约参展的八届“全勤生”，来自40个国家和地区的60个海外展团已确认参展，加拿大、马来西亚、新西兰、挪威、秘鲁等国参展企业规模创下历史新高。 吴政平透露，今年的企业商业展有几个创新点。首先，将首次为最不发达国家产品设立专区，进一步扩容升级原有非洲产品专区，推动所有与中国建交的最不发达国\u0026hellip;\n跨界连麦丨外卖大战“升级”！ 美团京东争做线下店，这局谁能赢？ - 2025-07-25T03:05:56+00:00\n如今手机屏幕里的补贴大战，又烧向街头巷尾的实体厨房。近日京东宣布，计划在未来3年内投入超百亿资金，在全国建设超10000家“七鲜小厨”门店；此前，美团也推出了“浣熊食堂”，未来3年，美团将在全国各地投资建设1200家“浣熊食堂”。记者实探京东七鲜小厨、美团浣熊食堂，平台为何要从“送外卖”到“做外卖”？商家、消费者、外卖员，会买账吗？互联网平台巨头转战线下，会对线下餐饮外卖、即时零售等行业带来怎么样的变化，两者在刚过去的外卖大战之后的又一次碰撞，谁会赢下这一局？我们请来了行业的参与者、观察者，一起跨界连麦，深入讨论。\u0026hellip;\n医药股表现活跃，康泰医学等涨停，机构建议关注两类标的 - 2025-07-25T03:05:18+00:00\n康泰医学20%涨停，正川股份、汉王科技、延华智能等多股涨停。 7月25日，医药股早盘表现活跃，医疗器械、智能医疗、互联网医疗、CRO等方向领涨，截至发稿，康泰医学20%涨停，正川股份、汉王科技、延华智能等多股涨停。 7月24日，国家医疗保障局局长章轲在国新办举行的“高质量完成‘十四五’规划”系列主题新闻发布会上介绍，“十四五”以来累计402种药品进入目录。国家医保药品目录实现全国统一，目录内药品总数达到3159种。章轲表示，目前一共有超过100个药品申报了创新药目录，接下来国家医保局会按程序做好后续工作。 国家医疗保障局副局长施子海在发布会上表示，近期第11批集采工作已经启动，国家医保局研究优化具体规则，在中选规则方面，优化价差的计算“锚点”，不再简单地以最低报价作为参考，同时，对于报价最低的中选企业，要公开说明报价的合理性，并承诺不低于成本报价。 另据国家医保局今日早间消息，近日，国家医保局召开医保支持创新药械系列座谈会第二场。10余家医疗机构、医药企业、医药类投资公司和新闻媒体单位的代表介绍医药领域新技术新产品研发、应用、投资等情况，并提出意见建议。在座谈会上，\u0026hellip;\n提升玻璃矿物棉工业治污水平，多项大气污染防治技术获推荐 - 2025-07-25T01:49:09+00:00\n推荐的技术可覆盖行业95%以上企业，指导企业选择可行的治理技术，避免盲目无效投资，有效降低运行成本。 生态环境部将推动玻璃、矿物棉工业大气污染防治技术提升，以防治大气污染，改善大气环境质量。7月24日起，生态环境部公开征求《玻璃工业大气污染防治可行技术指南（征求意见稿）》《矿物棉工业大气污染防治可行技术指南（征求意见稿）》2项国家生态环境标准意见。《玻璃工业大气污染防治可行技术指南（征求意见稿）》编制说明介绍，平板玻璃行业是我国重要基础建材产业，按用途分类包括建筑用、汽车用和太阳能电池用平板玻璃。我国平板玻璃产量位居世界第一，约占全球总产量的50%。从区域看，平板玻璃企业主要分布在河北、湖北、广东、山东、四川、辽宁、福建、安徽、湖南、浙江等地区。玻璃工业污染主要是废气污染物，包括配料等工序产生的颗粒物、玻璃熔窑燃料燃烧过程排放的烟气和涂装、印刷等工序产生的VOCs（含苯和苯系物）。目前我国玻璃工业通常采用的燃料包括天然气、煤制气、焦炉煤气、重油等，不同燃料排放的污染物浓度也不相同。编制说明称，综合考虑玻璃工业污染防治，既要考虑源头原辅材料替代削减和工艺技术革新，也要考虑末端治\u0026hellip;\n上海崇明等获认证，中国成为“国际湿地城市”最多国家 - 2025-07-25T01:48:47+00:00\n由公约认证的“国际湿地城市”，是城市湿地生态保护的最高成就。目前，全世界共有“国际湿地城市”74个。 我国上海崇明、浙江温州、云南大理、福建福州、浙江杭州、江西九江、西藏拉萨、江苏苏州、湖南岳阳等9个城市7月24日获得“国际湿地城市”认证。至此，我国国际湿地城市总数达22个，居全球第一。 第一财经记者今天从国家林草局获悉，在24日开幕的《湿地公约》第十五届缔约方大会上，上述9个城市成为“国际湿地城市”。由公约认证的“国际湿地城市”，是城市湿地生态保护的最高成就。目前，全世界共有“国际湿地城市”74个。 此前，我国的哈尔滨、海口、东营、武汉、盐城、南昌等13个城市，分别于2018年和2022年先后获得“国际湿地城市”认证。这些湿地城市湿地资源丰富，湿地景观独特，不仅湿地生态系统及生物多样性得到了有效保护，还实现了城乡人民共享优良湿地生态空间的美好愿景。 国家林草局介绍，上海崇明是从湿地中发展起来的城市，有着全世界最大的河口冲积岛，湿地覆盖面积近70%；浙江温州实施滨海、海岛和城市湿地系统修复，构建了全域湿地保护格局；云南大理形成了高山湖泊与城市相依相伴的独特格局，是高原湖\u0026hellip;\n滚动更新丨沪指半日跌0.34%，雅下水电概念股集体调整 - 2025-07-25T01:38:05+00:00\n盘面上，海南自贸区板块延续涨势，影视院线、旅游及酒店、免税店概念活跃；贵金属、稀土永磁板块走弱。 11:31 A股午盘丨沪指跌0.34% 沪指报3593.38点，跌0.34%，深成指报11160.3点，跌0.29%，创业板指报2337.8点，跌0.32%。 盘面上，雅下水电概念股迎来调整，中设股份跌停，深水规院、铁建重工等跌超10%。海南自贸区板块高开低走，稀土永磁、钢铁、水利、白酒股走弱；AI应用端走强，医疗器械、教育、草甘膦、互联网电商板块涨幅居前，物流板块活跃。 沪深两市半日成交额1.11万亿，较上个交易日缩量94.5亿。全市场超3000只个股下跌。 11:03 沪深两市成交额连续第42个交易日突破1万亿元。 11:00 港股恒生指数跌幅扩大至1%，恒生科技指数现跌1.62%。 10:41 多晶硅期货主力合约日内涨幅扩大至4%，报54280元/吨。 10:35 券商股持续走强，西部证券拉升触及涨停，锦龙股份、中银证券、第一创业、天风证券等纷纷冲高。 10:30 碳酸锂期货主力合约日内触及涨停，报80520元/吨，涨幅7.99%。 10:29\u0026hellip;\n硅片7月涨20%、硅料期货更猛，控产力度将成后续出清关键 - 2025-07-25T01:14:31+00:00\n目前光伏行业已形成“提价”和“限产”两大基本路线，提价效果已现，控产面临考验。 7月以来，光伏产业链价格涨势不止。 中国有色金属工业协会硅业分会7月24日披露，21日以来，光伏硅片各尺寸的产品继续涨价，最低涨幅为4.7%，月内累计涨幅已经超过20%。同时，多晶硅期货也大幅上涨，月内累计上涨60%，现货硅料价格的成交价则接近5万元/吨，月内涨幅超过40%。 产业提价之际，7月24日下午，国家发展改革委、市场监管总局发布关于《中华人民共和国价格法修正草案（征求意见稿）》（下称“修正草案”）公开征求意见的公告提出，进一步明确不正当价格行为认定标准，其中涉及完善低价倾销的认定标准，规范市场价格秩序，治理“内卷式”竞争。业内分析认为，此次价格法修正有助于整治光伏“内卷式”竞争。 提价与控产，是光伏反内卷的两条途径，当前产业提价效果明显，虽然终端组件对涨价接受程度未知，但阶段性缓解了光伏制造商的经营压力。光伏阶段性提价，反映市场对政策落地与行业反转抱有较强预期，但由于年内光伏装机需求增速放缓，提价之后的控产有效性与实际效果，将是光伏企业基本面能否实现反转的关键。 市场情绪推动硅片\u0026hellip;\n美联邦航空管理局：印度客机空难似乎并非由波音燃油控制装置引起 - 2025-07-25T00:58:19+00:00\n贝德福德称，FAA员工已经将燃油控制装置拆下进行测试，并派检查员登机进行检查。他们非常确信，这不是燃油控制装置意外操作造成的问题。 据央视新闻，美国联邦航空管理局（FAA）局长贝德福德当天表示，此前印度航空一架波音787客机坠毁的致命事故，似乎并非由机械故障或燃油控制装置意外移动造成。贝德福德称，FAA员工已经将燃油控制装置拆下进行测试，并派检查员登机进行检查。他们非常确信，这不是燃油控制装置意外操作造成的问题。\u0026hellip;\n互指对方先开火 泰柬局势持续升级 联合国安理会将召开紧急会议 - 2025-07-25T00:57:52+00:00\n冲突发生后，国际社会表示强烈关注，呼吁双方停止冲突，通过对话解决分歧。 柬埔寨和泰国24日在边境地区发生冲突，据泰方通报，冲突已致该国11人死亡、28人受伤。冲突发生后，国际社会表示强烈关注，呼吁双方停止冲突，通过对话解决分歧。据外媒报道，应柬埔寨首相洪玛奈请求，联合国安理会将于当地时间25日下午3时召开紧急会议，讨论柬泰边境局势。 泰国军方：针对柬方军事目标实施打击 泰国陆军发言人24日表示，泰方当天打击了柬埔寨的军事目标，包括两次出动F－16战机实施打击。 泰国陆军发言人文泰·苏瓦里当天傍晚在新闻发布会上表示，泰方根据联合国宪章相关条款行使自卫权，还击仅限于摧毁对方的军事目标。作为远程火力支援行动的一部分，泰方出动F－16战机进行两轮打击。 文泰呼吁尽快开始外交谈判，找到解决冲突的方案。他表示，现在研判泰方行动会持续多久还为时过早，但希望冲突尽快结束。 泰国和柬埔寨士兵24日在两国边境地区发生冲突，双方均表示对方先开火。柬埔寨首相洪玛奈当天指责泰方违反国际法基本原则，呼吁泰国“立即停止一切敌对行动，将其军队撤回泰国境内，并避免任何可能导致局势升级的挑衅行动”。 \u0026hellip;\n国家/地区: 日本 NHK 2中国人及1日本人涉伪造托业证书被材料送检 - 2025-07-24T10:15:58+00:00\n之前，因伪造发放给在日外国人的在留卡而被逮捕起诉的中国籍被告人，近日又涉嫌为一名日本公司职员伪造记载有“托业”（TOEIC）英语能力考试分数的证书，其涉案材料被东京警视厅移送检方处理。此人名为杜晶江，现年35岁，居住于东京都大田区。涉案材料被移送检方处理的还有另外一名中国人以及委托伪造证书的日本籍公司职员。该公司职员现年39岁，居住于石川县金泽市。据东京警视厅透露，以上三人共谋，于今年4月在被告人杜晶江位于大田区的住所内，使用电脑等伪造了记载有托业分数，以及该日本公司职员姓名的证书，其行为涉嫌“伪造有印私文书”。在调查中，三人均承认了相关嫌疑。其中，日本公司职员供述称：“我希望被公司派驻海外，所以委托制作了伪造证书。我真心反省悔过。”此外，警方还从相关场所发现了400到500份日本人名义的数据文件，包括驾驶执照、毕业证书、医师资格证等。东京警视厅认为，可能有指使者身在中国的团伙实施其他伪造证件行为，目前正在展开调查。\u0026hellip;\n生活问答 如何安全使用空调 ②空调事故的原因 - 2025-07-24T10:15:54+00:00\n在日本，空调俨然已成为夏季预防中暑的必需品。然而，因空调使用方法不当而导致的事故连年不断。本系列介绍空调事故的常见原因和防患于未然的检查要点等。本期介绍空调事故的原因。产品评估技术基础机构（NITE）对截至2025年3月通报的261起空调事故分析了事故原因。结果显示，18%的事故是由产品本身有缺陷或发生故障引起的；而一半以上，即56%的事故是由于用户使用不当等人为失误引起的，其中最多的人为失误是空调的室外机或室内机的安装方式不对，或安装位置出错。产品评估技术基础机构称空调事故数量之多，在所有产品事故排行榜中每年都位居前十，从而呼吁人们正确使用空调。（以上是截至2025年6月24日的信息。）\u0026hellip;\n雅鲁藏布江水电工程开工 印度表示担忧 - 2025-07-24T10:15:50+00:00\n中国在流经西藏自治区的雅鲁藏布江启动了大型水力发电设施的建设工程。位于雅鲁藏布江下游的印度此前对可能产生的影响表示担忧，但中国政府坚称“不会产生不利影响”。据新华社报道，此项工程是中国政府在流经西藏自治区的雅鲁藏布江上建设5座梯级电站。开工仪式于7月19日举行，中国国务院总理李强出席了仪式。该工程投资额约为1万2000亿元人民币，折合日元超过24万亿。据中国媒体报道，这一“世纪工程”完工后，其发电量将远超位于长江上的世界最大规模水坝三峡大坝。中国政府表示，该工程将有助于推广清洁能源，改善当地居民生活。关于该工程，处于雅鲁藏布江下游的印度一直担心是否会对其造成不利影响。但中国外交部发言人在7月23日的记者会上表示：该工程建设有利于全流域防灾减灾，不会对下游地区产生不利影响。中方将继续同下游国家加强合作。\u0026hellip;\n丰田宣布其印尼工厂将开始生产电动汽车 - 2025-07-24T10:15:45+00:00\n丰田汽车公司宣布其印尼工厂将开始生产电动汽车（EV）。这将是丰田首次在东南亚生产电动汽车。日本、中国和韩国三国的汽车厂家在当地的竞争可能会更加激烈。丰田汽车公司7月23日透露其在印度尼西亚雅加达近郊的工厂将开始生产电动汽车。公司计划从今年12月起生产电动多用途运动型汽车 (SUV)，但并未透露生产数量和投资金额。丰田的战略是不仅提供纯电动汽车，还提供混合动力车和插电式混合动力车等多种车型。据分析，丰田是在印尼政府推广电动汽车的背景下，预计未来市场将进一步扩大，因此决定在印尼当地进行生产。如按计划投产，这将是丰田首次在东南亚生产电动汽车。在印尼等东南亚国家，日本厂家的汽车销量一直占有较高的市场份额，但近年来，中国和韩国厂家纷纷推出电动汽车，加大了争夺市场份额的力度，未来日中韩三国的汽车厂家在该地区的竞争可能会更加激烈。\u0026hellip;\n北海道多地气温刷新观测史上最高记录 - 2025-07-24T10:15:40+00:00\n7月24日日本依然普遍出现高温天气，多地刷新观测记录。其中，北海道北见市最高气温达摄氏39度。请大家严防中暑，采取多重防护措施，争取做到万无一失。据日本气象厅消息，高气压正持续笼罩日本附近地区，各地相继出现危险高温天气。截至24日14时10分，各地的最高气温分别为：福岛县伊达市39.3度，北海道北见市39度，北海道佐吕间町、群马县桐生市、京都府福知山市38.6度，北海道津别町38.4度，兵库县丰冈市38.3度，北海道带广市38.2度。其中，北海道的北见市等多地最高气温刷新了开始进行观测以来的最高记录。随着高温持续，因中暑而送医救治的人不断增加，已发生多个老人等疑似因中暑而死亡的病例。请大家严防中暑，适当使用空调等，保持环境凉爽并补充水分和盐分，在户外作业时要多多休息，采取多重措施加以应对，争取做到万无一失。\u0026hellip;\n泰柬边境地区发生武装冲突 泰方9人死亡 - 2025-07-24T10:15:34+00:00\n7月24日，在泰国与柬埔寨存有领土争议的边境地区，双方军队发生了武装冲突。根据泰国军方的消息，目前泰方已有包括当地居民在内的9人死亡，另有10余人受伤。泰国军方也出动了军机，对柬埔寨军方的部队进行了攻击。据悉，战斗仍在泰柬边境多地持续，紧张局势正在升级。\u0026hellip;\n生活问答 如何安全使用空调 ①事故统计数据 - 2025-07-24T05:42:15+00:00\n在日本，空调俨然已成为夏季预防中暑的必需品。然而，因空调使用方法不当而导致的事故连年不断。本系列介绍空调事故的常见原因和防患于未然的检查要点等。本期介绍事故的统计数据。产品评估技术基础机构（NITE）的统计显示，截至2025年3月的5年间，共收到363起空调的事故报告。其中占比三分之一的108起集中在7月和8月这一空调使用高峰期。此外，90%的事故都是火灾，有7起造成人员死亡。产品评估技术基础机构提醒民众，“空调事故不仅会造成产品自身的损坏，还可能造成严重的财产和人身损失。盛夏时节是维修高峰期，请在此之前尽早对空调进行试运行，检查是否存在异常”。 （以上是截至2025年6月23日的信息）\u0026hellip;\n日美澳印海上安全机构人员同船开展航行训练 - 2025-07-24T05:32:26+00:00\n日前，日本、美国、澳大利亚和印度四国海上安全机构的相关人员登上航行于太平洋上的美国巡逻船，同船进行了相关训练。在去年9月的日美澳印“四边安全对话”（Quad）峰会上，四国首脑就加强海上安全合作达成一致，在此背景下，有关方面举行了本次训练活动。据日本海上保安厅介绍，日美澳印四国海上安全机构的相关人员6月28日登上美国巡逻船从太平洋岛国帕劳出发，前往目的地关岛，进行了为期5天的航行训练。其间，除了船舶操纵等船上作业以外，还进行了模拟船上失火时的灭火训练等。这是四国海上安全机构的相关人员首次在巡逻船上同船开展训练。在中国加强海洋活动的情况下，据信此次训练旨在加强四国间的合作。\u0026hellip;\n石破与欧盟领导人同意加强防务产业等合作 - 2025-07-24T05:32:22+00:00\n7月23日，日本首相石破茂在首相官邸与欧洲理事会主席科斯塔、欧盟委员会主席冯德莱恩举行了例行首脑会谈。双方一致认为，欧洲与印度太平洋的安全密不可分，同意在防务产业、经济安全等领域加强合作。会谈时，石破首相表示：“欧盟与日本是关系牢靠、志同道合的伙伴，希望双方密切合作，捍卫以多边主义和法治为基础、自由开放的国际秩序”。对此，科斯塔表示：“日本是欧盟在印太最亲密的伙伴。我想重申，这是一种建立在共同价值观和共同利益基础上的牢固关系。”双方一致认为，欧洲与印度太平洋的安全密不可分，同意加强在防务产业、网络安全等领域的合作。在经济安全领域，双方确认将在加强重要矿产供应链等方面进一步深化合作。\u0026hellip;\n俄乌直接谈判：乌提议首脑会谈俄持否定态度 - 2025-07-24T05:32:18+00:00\n7月23日晚，俄罗斯与乌克兰在土耳其伊斯坦布尔举行了第三轮直接谈判。谈判结束后，双方代表团分别召开了记者会。乌克兰国家安全与国防委员会秘书乌梅罗夫公布称，已提议在8月底之前举行泽连斯基总统与普京总统的首脑会谈。他还表示，将请求美国总统特朗普与土耳其总统埃尔多安出席会谈，并指出：“如果俄罗斯同意这一提议，就可以向全世界显示出其在建设性地推动进程。”另一方面，俄罗斯总统助理梅金斯基公布称，俄乌双方已就今后至少交换1200名战俘达成一致。然而，关于首脑会谈，梅金斯基称：“首先必须明确协议的具体内容。首脑会谈应当是达成最终决议并进行签署的场合，而不是进行磋商。”他以此表示对短期内召开首脑会谈持否定态度。\u0026hellip;\n国家/地区: 欧美 BBC Thailand-Cambodia clashes continue as thousands displaced - 2025-07-25T04:01:11+00:00\nImage caption, A Thai girl displaced by the fighting seeks shelter in Surin provinceKelly NgBBC News, SingaporePublished25 July 2025, 04:48 BSTUpdated 5 minutes agoFighting between Thailand and Cambodia entered a second day on Friday, killing at least 16 people and displacing tens of thousands, as world leaders call for a ceasefire.Intense fighting at a disputed border erupted Thursday, marking a dramatic escalation of the dispute between the two South East Asian neighbours that dates back more \u0026hellip;\nHow a vote targeting \u0026lsquo;pro-China\u0026rsquo; lawmakers has split Taiwan - 2025-07-24T22:51:11+00:00\nImage source, Getty ImagesImage caption, Taiwan\u0026rsquo;s legislators have engaged in brawls in parliament in recent months amid a heated political deadlockTessa WongBBC News, TaipeiPublished5 hours agoFor most of his life, Deng Pu didn\u0026rsquo;t see himself as an activist – but that changed last year.Furious at what he felt was undemocratic behaviour by Taiwan\u0026rsquo;s lawmakers and overt Chinese influence in parliament, he joined thousands of others in a massive street protest. Two months ago, he signed up with a c\u0026hellip;\nThe fractured friendship behind the fight at the Thailand-Cambodia border - 2025-07-24T22:19:25+00:00\nTo play this video you need to enable JavaScript in your browser.This video can not be playedView video in browser: Media caption, Watch: People take shelter after gunfire breaks out between Thailand and Cambodia troopsJonathan HeadSouth East Asia correspondentPublished5 hours agoCambodia and Thailand have a history of occasional conflict.The two countries share a long and forested border with areas that both sides claim. There have been serious exchanges of fire in the past, too – in 2008 and \u0026hellip;\nKing meets Modi after India-UK trade deal signed - 2025-07-24T19:08:13+00:00\nImage source, PA MediaJennifer McKiernanPolitical reporter, BBC News@_JennyMcKiernanPublished24 July 20252173 CommentsKing Charles has held talks with Indian Prime Minister Narendra Modi at Sandringham, after a free trade deal was signed between the UK and India.UK cars and whisky will be cheaper to export to India and Indian textiles and jewellery cheaper to export to the UK under the multi-billion pound export boost.The deal took three years to reach and also commits to a new India-UK plan to \u0026hellip;\nEU chief says ties with China at \u0026lsquo;inflection point\u0026rsquo; - 2025-07-24T15:01:47+00:00\nImage source, ReutersImage caption, The EU\u0026rsquo;s challenges \u0026ldquo;do not come from China\u0026rdquo;, Xi Jinping maintainsKoh Ewe, Kelly Ng and Paul KirbyBBC News, Singapore and LondonPublished24 July 2025EU-China relations have reached an \u0026ldquo;inflection point\u0026rdquo;, European Commission President Ursula von der Leyen told her Chinese counterpart Xi Jinping at a one-day summit in Beijing.\u0026ldquo;As our co-operation has deepened, so have imbalances,\u0026rdquo; von der Leyen said, referring to the European Union\u0026rsquo;s huge trade deficit with Chin\u0026hellip;\nWhy are Thailand and Cambodia fighting at the border? - 2025-07-24T10:58:36+00:00\nImage source, ReutersImage caption, Fighting broke out along the border in JulyFlora Drury and Gavin ButlerBBC NewsPublished24 July 2025On Thursday, simmering tensions between Thailand and Cambodia exploded into a deadly battle at the border.At least 12 Thai nationals, most of whom are civilians, have been killed, Thai authorities have said.How many people - if any - have lost their lives on the Cambodian side is not known.Each side is blaming each other for causing the escalation, which reporte\u0026hellip;\nTwelve killed in Thailand-Cambodia military clashes on disputed border - 2025-07-24T10:58:24+00:00\nTo play this video you need to enable JavaScript in your browser.This video can not be playedView video in browser: Media caption, Watch: People take shelter after gunfire breaks out between Thailand and Cambodia troopsJonathan HeadBBC News in BangkokKelly NgBBC NewsPublished24 July 2025Clashes between Thai and Cambodian troops at their disputed border have killed at least 12 people, Thai authorities say.The fighting marks an escalation of a dispute between the two South East Asian neighbours th\u0026hellip;\n\u0026lsquo;I did my best\u0026rsquo;: Teacher dies after rescuing 20 kids from Bangladesh plane crash - 2025-07-24T09:14:08+00:00\nImage source, Getty ImagesJannatul TanveeBBC Bangla in DhakaGavin ButlerBBC News in SingaporePublished24 July 2025\u0026quot;Those kids are my kids too,\u0026quot; Mahreen Chowdhury told her husband as she lay dying in hospital.Just hours earlier, the teacher had been standing at the entrance to Milestone School and College in the Bangladesh capital of Dhaka, preparing to hand the second- to fifth-grade students over to their parents.But in a split second, what had been an unremarkable Monday lunchtime turned to ho\u0026hellip;\nAustralia to lift import ban on US beef after Trump tariffs tiff - 2025-07-24T06:16:45+00:00\nImage source, Getty ImagesImage caption, Australia has some of the strictest biosecurity rules in the worldTiffanie TurnbullBBC News, SydneyPublished24 July 2025Australia will lift restrictions on the import of beef from the US, a trade barrier which had angered the Trump administration.American beef has effectively been banned from the country - which has some of the strictest biosecurity laws in the world - since 2003 after an outbreak of mad cow disease.The White House had cited the restricti\u0026hellip;\nAustralian women win right to sue Qatar Airways over invasive searches - 2025-07-24T03:22:08+00:00\nImage source, Getty ImagesImage caption, The women were ordered off a flight and checked for whether they had given birthTiffanie TurnbullBBC News, SydneyPublished24 July 2025Five Australian women who were strip-searched and invasively examined at Doha airport have won the right to sue Qatar Airways after an appeal.The women were ordered off a flight and checked for whether they had given birth after a baby was found abandoned in an airport bin in 2020 - an incident that sparked global outrage.A\u0026hellip;\n","permalink":"https://garywy.github.io/zh/posts/news/daily-news-summary-20250725/","summary":"国家/地区: 中国 新华社 习近平接受外国新任驻华大使递交国书 - 2025-07-25T04:07:52+00:00 新华社北京7月25日电（记者邵艺博、曹嘉玥）7月25日上午，国家主席习近平在北京","title":"[2025.07.25. 全球新闻汇总]"},{"content":"因为作者正在进行日语Dajare的相关研究，其中涉及了关于日语文本在发音相似度方面的计算，因此本文旨在总结了日语中的发音单元（mora）以及单词的发音表达形式，以便于后续对本文发音相似性的计算。\n在日语中，不同语言学家对于mora的总结不同，因此本文主要参照了秋永一枝先生的论文日本語の音節(拍)は幾つか。在这篇论文中详细的介绍了日语音节，以及其组成成分和种类。\nMora 首先mora指的是，日语中发音的最小单位。在中文中，我们也可以叫做拍，更直接一点，我们可以叫做字。\n在日语中我们所熟知的あ, い, う, え, お均是一个mora，因为其拥有独立的发音。因此我们可知，日语50音均为mora。\nあ (a) い (i) う (u) え (e) お (o) 清\n音\nあ行 あ ア い イ う ウ え エ お オ か行 か カ き キ く ク け ケ こ コ さ行 さ サ し シ す ス せ セ そ ソ た行 た タ ち チ つ ツ て テ と ト な行 な ナ に ニ ぬ ヌ ね ネ の ノ 清\n音\nは行 は ハ ひ ヒ ふ フ へ ヘ ほ ホ ま行 ま マ み ミ む ム め メ も モ や行 や ヤ ゆ ユ よ ヨ ら行 ら ラ り リ る ル れ レ ろ ロ わ行 わ ワ を ヲ 撥音 ん ン 事实上，真实的mora种类超过了100个，其中主要是由于日语发音构成的特殊性。比如しょ, ティ, ヴェ等，虽然他们是由两个独立音节组成，但是事实上当我们读这样的单词时，你就会发现其实他只发了一次音。比如しょ，我们读作sho(中文谐音：消)；但是如果将其分开，比如し, よ,我们读作shi, yo(中文谐音：洗哟)。很明显通过中文谐音可以看出来他们的发音次数不同，也就意味着两个独立音节事实上可以组合成一个独立音节。\n因为日语单词发音相似度事实上就是日语单词mora的相似度，因此我们需要总结所有的mora种类。\n音素 为了总结所有的mora种类，我们首先需要mora的构成规律。而刚刚提到的mora事实上是发音的最小单位，但并不是组成发音的最小单位。而组成发音的最小单位被称为音素。以中文举例，每一个字就是一个mora，其中一个字具有声母和韵母，这里的声母和韵母就可以理解为是音素。通过调查相关论文，我们了解到在日语中所有的mora都是由3个音素组成，分别称为子音，半母音，母音。\n其中具体的音素可以总结如下：\n子音 k, g, s, z, c, t, d, n, h, b, p, m, r, v 半母音 j, w 母音 a, i, u, e, o 特殊 N(ん), T(つ), R(ー) 其中子音14个，半母音2个，母音5个，特殊音素3个。而一个mora则是按照子音 + 半母音 + 母音的顺序组成。其中正常情况下仅有子音和半母音可以为空。为了更直观的表示我们用*来表示空白。比如说我们提到的あ, い, う, え, お就是子音和半母音为空的例子**a, **i, **u, **e, **o。而ティ, ヴェ就是半母音为空的例子t*i, v*e。しょ则是由子音，半母音和母音构成的例子sjo。\n而特殊音素我们均将其认定为子音，例如ん就是N**，这里就是刚刚所说的非正常情况，因为母音为空。在所有的mora中，仅有这三个特殊音素组成的mora，其母音可以为空。因此后续的mora构成规则将不包括这3个特殊的mora。\n已知，一个mora由子音 + 半母音 + 母音的顺序构成，因此我们可以得到15 * 3 * 5 = 225种组合方式，其中由于子音和半母音的位置可以为空，因此在原有的基础上各多了1种选择。\n但是经过我们的调查，mora的个数并没有225+3(特殊音素)=228个，其中的原因是部分组合没有发音或不同组合发音一致。其中不同组合发音一致的情况我们总结如下：\n(ァ、ア) (ィ、イ) (ゥ、ウ) (ェ、エ) (ォ、オ) (ャ、ヤ) (ュ、ユ) (ョ、ヨ) (ヲ、オ) (ヅ、ズ) (イャ、ヤ) (イュ、ユ) (イョ、ヨ) (ウァ、ワ) (ヅィ、ズィ) 上面的两种组合的发音一致，因此我们只将其认定为一种mora。\n除此之外，例如tja,vja等由于其不存在单个发音，因此被认定为非mora。由于未发现此类组合的共有特征，因此我们通过调查以及分析过滤掉了这些单词，而最终得到的所有mora，如下表所示。\na i u e o ja ju je jo wa wi we wo k カ キ ク ケ コ キャ キュ キョ クァ クィ クェ クォ g ガ ギ グ ゲ ゴ ギャ ギュ ギョ グァ s サ シ ス セ ソ シャ シュ シェ ショ グァ スィ z ザ ジ ズ ゼ ゾ ジャ ジュ ジェ ジョ グァ ズィ c ツァ チ ツ ツェ ツォ チャ チュ チェ チョ グァ t タ ティ トゥ テ ト テュ グァ d ダ ディ ドゥ デ ド デュ グァ n ナ ニ ヌ ネ ノ ニャ ニュ グァ h ハ ヒ フ ヘ ホ ヒャ ヒュ ヒェ ヒョ ファ フィ フェ フォ b バ ビ ブ ベ ボ ビャ ビュ ビョ グァ p パ ピ プ ペ ポ ピャ ピュ ピョ グァ m マ ミ ム メ モ ミャ ミュ ミョ グァ r ラ リ ル レ ロ リャ リュ リョ グァ v ヴァ ヴィ ヴ ヴェ ヴォ ø ア イ ウ エ オ ヤ ユ イェ ヨ ワ ウィ ウェ ウォ 最终我们总结出来的mora总数为133 + 3 = 136个。通过该表，我们可以将日语发音用文字列表示。因此在计算日语文本发音相似度的时候，便可以将其转换为字符串相似度问题（编辑距离）。\n此外，本文并没有讲述如何将日语单词拆分成mora的组合，有兴趣的可以参考日本語（カタカナ）をモーラ単位で分かち書き【Python】，其中介绍了利用了正则表现的方法将日语文本的假名列分割成mora的方法。\n总结 本文主要总结了日语中发音的种类，未来可能会对发音相似本文检索提供一个理论支持，同时简化计算。\n","permalink":"https://garywy.github.io/zh/posts/study/mora/","summary":"因为作者正在进行日语Dajare的相关研究，其中涉及了关于日语文本在发音相似度方面的计算，因此本文旨在总结了日语中的发音单元（mora）以及","title":"日语最小发音（Mora）的总结"},{"content":" 专辑名称: Like All Before You 歌手: The Voidz 发行时间: 2024-09-20 发行公司: Cult Records ","permalink":"https://garywy.github.io/zh/music/2025-05-12/","summary":"专辑名称: Like All Before You 歌手: The Voidz 发行时间: 2024-09-20 发行公司: Cult Records","title":"Like All Before You"},{"content":" 专辑名称: CHROMAKOPIA 歌手: Tyler, The Creator 发行时间: 2024-10-28 发行公司: 索尼音乐 ","permalink":"https://garywy.github.io/zh/music/2024-11-08/","summary":"专辑名称: CHROMAKOPIA 歌手: Tyler, The Creator 发行时间: 2024-10-28 发行公司: 索尼音乐","title":"CHROMAKOPIA"},{"content":" 专辑名称: Angel Face 歌手: Stephen Sanchez 发行时间: 2023-09-22 发行公司: Mercury Records / Republic Records ","permalink":"https://garywy.github.io/zh/music/2024-10-10/","summary":"专辑名称: Angel Face 歌手: Stephen Sanchez 发行时间: 2023-09-22 发行公司: Mercury Records / Republic Records","title":"Angel Face"},{"content":" 专辑名称: Madvillainy 歌手: Madvillain / MF DOOM / Madlib 发行时间: 2004-03-24 发行公司: Stones Throw Records ","permalink":"https://garywy.github.io/zh/music/2024-10-07/","summary":"专辑名称: Madvillainy 歌手: Madvillain / MF DOOM / Madlib 发行时间: 2004-03-24 发行公司: Stones Throw Records","title":"Madvillainy"},{"content":" 专辑名称: Melophobia 歌手: Cage the Elephant 发行时间: 2013-10-08 发行公司: 索尼音乐 ","permalink":"https://garywy.github.io/zh/music/2024-10-04/","summary":"专辑名称: Melophobia 歌手: Cage the Elephant 发行时间: 2013-10-08 发行公司: 索尼音乐","title":"Melophobia"},{"content":" 专辑名称: Silence Between Songs 歌手: Madison Beer 发行时间: 2023-09-15 发行公司: 索尼音乐 ","permalink":"https://garywy.github.io/zh/music/2024-10-02/","summary":"专辑名称: Silence Between Songs 歌手: Madison Beer 发行时间: 2023-09-15 发行公司: 索尼音乐","title":"Silence Between Songs"},{"content":" 专辑名称: NEVER ENOUGH 歌手: Daniel Caesar 发行时间: 2023-04-07 发行公司: Republic Records ","permalink":"https://garywy.github.io/zh/music/2024-10-01/","summary":"专辑名称: NEVER ENOUGH 歌手: Daniel Caesar 发行时间: 2023-04-07 发行公司: Republic Records","title":"NEVER ENOUGH"},{"content":" 专辑名称: In the Aeroplane Over the Sea 歌手: Neutral Milk Hotel 发行时间: 1998-02-20 发行公司: Merge Records ","permalink":"https://garywy.github.io/zh/music/2024-09-30/","summary":"专辑名称: In the Aeroplane Over the Sea 歌手: Neutral Milk Hotel 发行时间: 1998-02-20 发行公司: Merge Records","title":"In the Aeroplane Over the Sea"},{"content":"前言 因为总是在动态规划问题上碰壁，所以想总结一下动态规划问题的解决办法。\nDP问题基本解题思路：\n初始状态 状态转移方程 1. 线性DP 1.1 例题：Leetcode 300. Longest Increasing Subsequence Given an integer array nums, return the length of the longest strictly increasing subsequence.\nExample 1:\nInput: nums = [10,9,2,5,3,7,101,18]\nOutput: 4\nExplanation: The longest increasing subsequence is [2,3,7,101], therefore the length is 4.\nExample 2:\nInput: nums = [0,1,0,3,2,3]\nOutput: 4\nExample 3:\nInput: nums = [7,7,7,7,7,7,7]\nOutput: 1\n(1) 思路\n初始状态 本题dp[n]可以是前n个元素中的最长子序列的长度。所以dp[0]可以是说只有一个元素的时候，那最长子序列的长度就是1。 dp[0] = 1 状态转移方程 如果有两个元素的时候，需要判断第一个元素和第二个元素之间的大小关系。 nums=[1, 3]，那么此时dp[1] = dp[0] + 1。 nums=[3, 1]，那么此时dp[1] = dp[0] 如果有三个元素的时候，在已知dp[0]和dp[1]的情况下，需要判断第三个元素和之前所有元素的大小关系。 nums=[1, 3, x]，首先1和x比大小，如果1\u0026lt;x的情况下，dp[2] = dp[0] + 1, 以此类推3和x比大小，如果3\u0026lt;x的情况下，dp[2] = dp[1] + 1。 此后的流程以此类推。 dp[i]指的是第i个元素前最长子序列长度，所以最终结果就是max(dp)。 (2) Python代码\ndef longest_increasing_subsequence(nums: list): res = 0 dp = [] for i in range(len(nums)): dp.append(1) for j in range(i): if nums[j] \u0026lt; nums[i]: dp[i] = max(dp[i], dp[j]+1) return max(dp) nums = [10,9,2,5,3,7,101,18] print(longest_increasing_subsequence(nums)) 1.2 例题：Leetcode 32. Longest Valid Parentheses\nGiven a string containing just the characters \u0026lsquo;(\u0026rsquo; and \u0026lsquo;)\u0026rsquo;, return the length of the longest valid (well-formed) parentheses substring.\nExample 1:\nInput: s = \u0026ldquo;(()\u0026rdquo;\nOutput: 2\nExplanation: The longest valid parentheses substring is \u0026ldquo;()\u0026rdquo;.\nExample 2:\nInput: s = \u0026ldquo;)()())\u0026rdquo;\nOutput: 4\nExplanation: The longest valid parentheses substring is \u0026ldquo;()()\u0026rdquo;.\nExample 3:\nInput: s = \u0026quot;\u0026quot;\nOutput: 0\n(1) 思路\n初始状态 本题dp可以是前n个元素中的完整括号的个数。dp[0]就是只有一个元素，那么肯定不是完整括号，所以完整括号的个数为0。 dp[0] = 0 状态转移方程 如果当元素s[i]==\u0026quot;)\u0026quot;的时候，那么就需要判断前一个元素s[i-1]==\u0026quot;(\u0026quot;?。 如果s[i-1]==\u0026quot;(\u0026quot;的时候，如果i\u0026gt;=2的时候， dp[i] = dp[i-2] + 2；否则dp[i] = 2。 如果s[i-1]==\u0026quot;)\u0026quot;的时候，那个就需要去找在该元素之前的)，也就是s[i-1-dp[i-1]]。所以上述的状态转移方程需要改变。如果i\u0026gt;=2的时候， dp[i] = dp[i-1] + dp[i-2-dp[i-1]] + 2；否则dp[i] = dp[i-1] + 2。 (2) Python代码\ndef longest_valid_parentheses(s: str): dp = [0]*(len(s)+1) for i in range(1, len(s)): if s[i] == \u0026#34;)\u0026#34;: if s[i-1] == \u0026#34;(\u0026#34;: if i \u0026gt;= 2: dp[i] = dp[i-2] + 2 else: dp[i] = 2 elif s[i-1-dp[i-1]] == \u0026#34;(\u0026#34; and i \u0026gt; dp[i-1]: if i \u0026gt;= 2: dp[i] = dp[i-1] + dp[i-2-dp[i-1]] + 2 else: dp[i] = dp[i-1] + 2 return max(dp) s = \u0026#34;(()\u0026#34; print(longest_valid_parentheses(s)) 1.3 例题 Leetcode 97. Interleaving String\nGiven strings s1, s2, and s3, find whether s3 is formed by an interleaving of s1 and s2.\nAn interleaving of two strings s and t is a configuration where s and t are divided into n and m substrings respectively, such that:\ns = s1 + s2 + ... + sn t = t1 + t2 + ... + tm |n - m| \u0026lt;= 1 The interleaving is s1 + t1 + s2 + t2 + s3 + t3 + ...or t1 + s1 + t2 + s2 + t3 + s3 + ...\nNote: a + b is the concatenation of strings a and b. Example 1:\nInput: s1 = \u0026ldquo;aabcc\u0026rdquo;, s2 = \u0026ldquo;dbbca\u0026rdquo;, s3 = \u0026ldquo;aadbbcbcac\u0026rdquo;\nOutput: true\nExplanation:\nOne way to obtain s3 is:\nSplit s1 into s1 = \u0026ldquo;aa\u0026rdquo; + \u0026ldquo;bc\u0026rdquo; + \u0026ldquo;c\u0026rdquo;, and s2 into s2 = \u0026ldquo;dbbc\u0026rdquo; + \u0026ldquo;a\u0026rdquo;.\nInterleaving the two splits, we get \u0026ldquo;aa\u0026rdquo; + \u0026ldquo;dbbc\u0026rdquo; + \u0026ldquo;bc\u0026rdquo; + \u0026ldquo;a\u0026rdquo; + \u0026ldquo;c\u0026rdquo; = \u0026ldquo;aadbbcbcac\u0026rdquo;.\nSince s3 can be obtained by interleaving s1 and s2, we return true.\nExample 2:\nInput: s1 = \u0026ldquo;aabcc\u0026rdquo;, s2 = \u0026ldquo;dbbca\u0026rdquo;, s3 = \u0026ldquo;aadbbbaccc\u0026rdquo;\nOutput: false\nExplanation: Notice how it is impossible to interleave s2 with any other string to obtain s3.\nExample 3:\nInput: s1 = \u0026ldquo;\u0026rdquo;, s2 = \u0026ldquo;\u0026rdquo;, s3 = \u0026quot;\u0026quot;\nOutput: true\n(1) 思路\n初始状态 本题dp是指s1的前i个元素和s2的前j个元素符合上述规则，即可以组合成为s3。 dp[0][0] = True 状态转移方程 首先考虑边界条件，即判断dp[i][0]和dp[0][j]。该情况是指s1前i个元素是否为s3的前i个元素或者s2前j个元素是否为s3的前j个元素。 dp[i][0] = dp[i-1][0] and s1[i-1] == s3[i-1] (i\u0026gt;=1) dp[0][j] = dp[0][j-1] and s2[j-1] == s3[j-1] (j\u0026gt;=1) 其次考虑dp[i][j]的情况。有两个可能性，一种是s1的第i个元素是否等于s3的第i+j个元素，另一种是s2的第j个元素是否等于s3的第i+j个元素。即有以下任何一种情况都成立。 dp[i][j] = dp[i-1][j] and s1[i-1] == s3[i+j-1] (i,j\u0026gt;=1) dp[i][j] = dp[i][j-1] and s2[j-1] == s3[i+j-1] (i,j\u0026gt;=1) 注意第n个元素的下标为n-1。 (2) Python代码\ndef interleaving_string(s1: str, s2: str, s3: str): m, n = len(s1), len(s2) if m+n != len(s3): return False dp = [[False]*(n+1) for _ in range(m+1)] dp[0][0] = True for i in range(1, m+1): dp[i][0] = dp[i-1][0] and s1[i-1] == s3[i-1] for j in range(1, n+1): dp[0][j] = dp[0][j-1] and s2[j-1] == s3[j-1] for i in range(1, m+1): for j in range(1, n+1): dp[i][j] = (dp[i-1][j] and s1[i-1] == s3[i+j-1]) or \\ (dp[i][j-1] and s2[j-1] == s3[i+j-1]) return dp[-1][-1] s1 = \u0026#34;aabcc\u0026#34; s2 = \u0026#34;dbbca\u0026#34; s3 = \u0026#34;aadbbcbcac\u0026#34; print(interleaving_string(s1, s2, s3)) 1.4 例题 Leetcode 115. Distinct Subsequences\nGiven two strings s and t, return the number of distinct subsequences of s which equals t. The test cases are generated so that the answer fits on a 32-bit signed integer.\nExample 1:\nInput: s = \u0026ldquo;rabbbit\u0026rdquo;, t = \u0026ldquo;rabbit\u0026rdquo;\nOutput: 3 Explanation:\nAs shown below, there are 3 ways you can generate \u0026ldquo;rabbit\u0026rdquo; from s. rabbbit\nrabbbit\nrabbbit\nExample 2:\nInput: s = \u0026ldquo;babgbag\u0026rdquo;, t = \u0026ldquo;bag\u0026rdquo; Output: 5\nExplanation:\nAs shown below, there are 5 ways you can generate \u0026ldquo;bag\u0026rdquo; from s.\nbabgbag\nbabgbag\nbabgbag\nbabgbag babgbag\n(1) 思路\n初始状态 本题dp是指t的前i个元素在s的前j个元素中存在子序列的个数。 dp[0][j] = 1，即t中的前0个元素（“”）在s中一定存在一个子序列。 状态转移方程 参考例题1.3，我们可以先穷举。 dp[1][0] = 0, dp[2][0] = 0, ... dp[1][1] = dp[0][0] + dp[0][1] if t[0] == s[0] else dp[0][1] dp[1][2] = dp[0][1] + dp[1][1] if t[0] == s[1] else dp[1][1] dp[2][1] = dp[1][0] + dp[2][0] if t[1] == s[0] else dp[2][0] 综上可得 dp[i][j] = dp[i-1][j-1] + dp[i][j-1] if t[i-1] == s[j-1] else dp[i][j-1] (i,j\u0026gt;=1) (2) Python代码\ndef distinct_subsequences(s: str, t: str): dp = [[0]*(len(s)+1) for _ in range(len(t)+1)] for j in range(len(s)+1): dp[0][j] = 1 for i in range(1, len(t)+1): for j in range(1, len(s)+1): dp[i][j] = dp[i-1][j-1] + dp[i][j-1] if t[i-1] == s[j-1] \\ else dp[i][j-1] return dp[-1][-1] s = \u0026#34;rabbbit\u0026#34; t = \u0026#34;rabbit\u0026#34; print(distinct_subsequences(s, t)) 1.5 例题 Leetcode 53. Maximum Subarray\nGiven an integer array nums, find the subarray with the largest sum, and return its sum.\nExample 1:\nInput: nums = [-2,1,-3,4,-1,2,1,-5,4]\nOutput: 6\nExplanation: The subarray [4,-1,2,1] has the largest sum 6.\nExample 2:\nInput: nums = [1] Output: 1\nExplanation: The subarray [1] has the largest sum 1.\nExample 3:\nInput: nums = [5,4,-1,7,8]\nOutput: 23 Explanation: The subarray [5,4,-1,7,8] has the largest sum 23.\n(1) 思路\n初始状态 本题dp可以指前i个元素中最大的和。 dp[0] = -inf 状态转移方程 dp[i] = max(nums[i-1], nums[i-1]+dp[i-1]) (2) Python代码\ndef maximum_subarray(nums: list): dp = [float(\u0026#34;-inf\u0026#34;) for _ in range(len(nums)+1)] for i in range(1, len(nums)+1): dp[i] = max(nums[i-1], nums[i-1]+dp[i-1]) return max(dp) nums = [-2,1,-3,4,-1,2,1,-5,4] print(maximum_subarray(nums)) 1.6 例题 Leetcode 152. Maximum Product Subarray\nGiven an integer array nums, find a subarray that has the largest product, and return the product.\nThe test cases are generated so that the answer will fit in a 32-bit integer.\nExample 1:\nInput: nums = [2,3,-2,4]\nOutput: 6 Explanation: [2,3] has the largest product 6.\nExample 2:\nInput: nums = [-2,0,-1]\nOutput: 0\nExplanation: The result cannot be 2, because [-2,-1] is not a subarray.\n(1) 思路\n初始状态 本题思路与例题1.5几乎一致，但是在乘法中，存在负数相乘的情况，所以需要同时保存最大值和最小值。因此需要设置dp_max和dp_min。 dp_max[0] = 0, dp_min[0] = 0 状态转移方程 dp_max[i] = max(nums[i-1], nums[i-1]*dp_max[i-1], nums[i-1]*dp_min[i-1]) dp_min[i] = min(nums[i-1], nums[i-1]*dp_max[i-1], nums[i-1]*dp_min[i-1]) (2) Python代码\ndef maximum_product_subarray(nums: list): if len(nums) == 1: return nums[0] dp_max = [0 for _ in range(len(nums)+1)] dp_min = [0 for _ in range(len(nums)+1)] for i in range(1, len(nums)+1): dp_max[i] = max(nums[i-1], nums[i-1]*dp_max[i-1], nums[i-1]*dp_min[i-1]) dp_min[i] = min(nums[i-1], nums[i-1]*dp_max[i-1], nums[i-1]*dp_min[i-1]) return max(dp_max) nums = [2,3,-2,4] print(maximum_product_subarray(nums)) 1.7 例题 Leetcode 198. House Robber\nYou are a professional robber planning to rob houses along a street. Each house has a certain amount of money stashed, the only constraint stopping you from robbing each of them is that adjacent houses have security systems connected and it will automatically contact the police if two adjacent houses were broken into on the same night.\nGiven an integer array nums representing the amount of money of each house, return the maximum amount of money you can rob tonight without alerting the police.\nExample 1:\nInput: nums = [1,2,3,1]\nOutput: 4\nExplanation: Rob house 1 (money = 1) and then rob house 3 (money = 3).\nTotal amount you can rob = 1 + 3 = 4.\nExample 2:\nInput: nums = [2,7,9,3,1]\nOutput: 12\nExplanation: Rob house 1 (money = 2), rob house 3 (money = 9) and rob house 5 (money = 1).\nTotal amount you can rob = 2 + 9 + 1 = 12.\n(1) 思路\n初始状态 首先确定dp的含义，本题可以是前i家房屋中金钱的最大值。因此为一维，并可确定初始状态。 dp[0] = 0, dp[1] = nums[0] 状态转移方程\n题目要求不能连续偷相邻房屋，例如在偷第3家的时候，我们必须确保前一天偷的是第1家。那么dp[3]事实上就是第1家和第3家的金钱总和和第2家金钱中的最大值，以此类推转移方程如下。 dp[i] = max(dp[i-2]+nums[i-1], dp[i-1]) (i\u0026gt;=2) (2) Python代码\ndef house_robber(nums: list): dp = [0 for _ in range(len(nums)+1)] dp[0], dp[1] = 0, nums[0] for i in range(2, len(nums)+1): dp[i] = max(dp[i-2]+nums[i-1], dp[i-1]) return dp[-1] nums = [1,2,3,1] print(house_robber(nums)) 1.8 例题 Leetcode 213. House Robber II\nYou are a professional robber planning to rob houses along a street. Each house has a certain amount of money stashed. All houses at this place are arranged in a circle. That means the first house is the neighbor of the last one. Meanwhile, adjacent houses have a security system connected, and it will automatically contact the police if two adjacent houses were broken into on the same night.\nGiven an integer array nums representing the amount of money of each house, return the maximum amount of money you can rob tonight without alerting the police.\nExample 1:\nInput: nums = [2,3,2]\nOutput: 3\nExplanation: You cannot rob house 1 (money = 2) and then rob house 3 (money = 2), because they are adjacent houses.\nExample 2:\nInput: nums = [1,2,3,1]\nOutput: 4\nExplanation: Rob house 1 (money = 1) and then rob house 3 (money = 3).\nTotal amount you can rob = 1 + 3 = 4.\nExample 3:\nInput: nums = [1,2,3]\nOutput: 3\n(1) 思路\n初始状态 首先确定dp的含义，本题可以是前i家房屋中金钱的最大值。因此为一维，并可确定初始状态。 dp[0] = 0, dp[1] = nums[0] 状态转移方程\n题目要求不能连续偷相邻房屋，例如在偷第3家的时候，我们必须确保前一天偷的是第1家。那么dp[3]事实上就是第1家和第3家的金钱总和和第2家金钱中的最大值，以此类推转移方程如下。 dp[i] = max(dp[i-2]+nums[i-1], dp[i-1]) (i\u0026gt;=2) 以上均与例题1.8完全一致，但是首尾的房屋为连续排列。此时我们可以分为两个部分进行计算，若存在n个房屋，我们可以先计算前n-1个房屋，再计算后n-1个房屋，以此确保首尾不会连续，然后取其中的最大值。 (2) Python代码\ndef house_robber(nums: list): dp = [0 for _ in range(len(nums)+1)] dp[0], dp[1] = 0, nums[0] for i in range(2, len(nums)+1): dp[i] = max(dp[i-2]+nums[i-1], dp[i-1]) return dp[-1] def house_robber2(nums: list): return max(house_robber(nums[1:]), house_robber(nums[:-1])) nums = [2,3,2] print(house_robber2(nums)) 1.9 例题 Leetcode 72. Edit Distance\nGiven two strings word1 and word2, return the minimum number of operations required to convert word1 to word2.\nYou have the following three operations permitted on a word:\nInsert a character Delete a character Replace a character Example 1:\nInput: word1 = \u0026ldquo;horse\u0026rdquo;, word2 = \u0026ldquo;ros\u0026rdquo;\nOutput: 3\nExplanation: horse -\u0026gt; rorse (replace \u0026lsquo;h\u0026rsquo; with \u0026lsquo;r\u0026rsquo;) rorse -\u0026gt; rose (remove \u0026lsquo;r\u0026rsquo;)\nrose -\u0026gt; ros (remove \u0026rsquo;e\u0026rsquo;)\nExample 2:\nInput: word1 = \u0026ldquo;intention\u0026rdquo;, word2 = \u0026ldquo;execution\u0026rdquo;\nOutput: 5\nExplanation:\nintention -\u0026gt; inention (remove \u0026rsquo;t\u0026rsquo;)\ninention -\u0026gt; enention (replace \u0026lsquo;i\u0026rsquo; with \u0026rsquo;e\u0026rsquo;)\nenention -\u0026gt; exention (replace \u0026rsquo;n\u0026rsquo; with \u0026lsquo;x\u0026rsquo;)\nexention -\u0026gt; exection (replace \u0026rsquo;n\u0026rsquo; with \u0026lsquo;c\u0026rsquo;)\nexection -\u0026gt; execution (insert \u0026lsquo;u\u0026rsquo;)\n(1) 思路\n初始状态 首先确定dp的含义，本题可以是word1的前i个元素和word2的前j个元素之间的编辑距离。因此为二维，并可确定初始状态。 dp[0][0] = 0, dp[i][0] = i, dp[0][j] = j 状态转移方程 该题目的简单来说就是找到插入代价，消除代价以及置换代价中的最小值。插入一个元素或消除一个元素，其都需要操作一次，即插入代价和消除代价为1。如果当word1中的第i个元素和word2中的第j个元素相等的时候，此时不需要置换，否则需要操作一次，即置换代价为1或0. insert_cost = 1, delete_cost = 1 replace_cost = 0 if word1[i-1] == word2[j-1] else 1 dp[i][j] = min(dp[i-1][j]+1, dp[i][j-1]+1, dp[i-1][j-1] + replace_cost) (i,j\u0026gt;=1) (2) Python代码\ndef edit_distance(word1: str, word2: str): dp = [[0]*(len(word2)+1) for _ in range(len(word1)+1)] for i in range(len(word1)+1): dp[i][0] = i for j in range(len(word2)+1): dp[0][j] = j for i in range(1, len(word1)+1): for j in range(1, len(word2)+1): replace_cost = 0 if word1[i-1] == word2[j-1] else 1 dp[i][j] = min(dp[i-1][j]+1, dp[i][j-1]+1, dp[i-1][j-1]+replace_cost) return dp[-1][-1] word1 = \u0026#34;horse\u0026#34; word2 = \u0026#34;ros\u0026#34; print(edit_distance(word1, word2)) 1.10 例题 Leetcode 44. Wildcard Matching\nGiven an input string (s) and a pattern (p), implement wildcard pattern matching with support for '?' and '*' where:\n'?' Matches any single character. '*' Matches any sequence of characters (including the empty sequence). The matching should cover the entire input string (not partial).\nExample 1:\nInput: s = \u0026ldquo;aa\u0026rdquo;, p = \u0026ldquo;a\u0026rdquo;\nOutput: false\nExplanation: \u0026ldquo;a\u0026rdquo; does not match the entire string \u0026ldquo;aa\u0026rdquo;.\nExample 2:\nInput: s = \u0026ldquo;aa\u0026rdquo;, p = \u0026ldquo;*\u0026rdquo; Output: true\nExplanation: \u0026lsquo;*\u0026rsquo; matches any sequence.\nExample 3:\nInput: s = \u0026ldquo;cb\u0026rdquo;, p = \u0026ldquo;?a\u0026rdquo; Output: false\nExplanation: \u0026lsquo;?\u0026rsquo; matches \u0026lsquo;c\u0026rsquo;, but the second letter is \u0026lsquo;a\u0026rsquo;, which does not match \u0026lsquo;b\u0026rsquo;.\n(1) 思路\n初始状态 首先确定dp的含义，本题是s的前i个元素和p的前j个元素之间是否匹配。因此为二维，并可确定初始状态。 dp[0][0] = True\n由于只有*可以匹配空字符，所以需要判断第j个元素是否为*. dp[0][j] = dp[0][j-1] if p[j-1] == \u0026quot;*\u0026quot; 状态转移方程 如果p中第j个元素为*时，那么任意匹配，即dp[i][j] = dp[i-1][j] or dp[i][j-1]， 表示是否使用该*.\n如果p中第j个元素为?或p中第j个元素为*与s的第i个元素相等时，那么dp[i][j] = dp[i-1][j-1]. (2) Python代码\ndef wildcard_matching(s: str, p: str): dp = [[False]*(len(p)+1) for _ in range(len(s)+1)] dp[0][0] = True for j in range(1, len(p)+1): if p[j-1] == \u0026#34;*\u0026#34;: dp[0][j] = dp[0][j-1] for i in range(1, len(s)+1): for j in range(1, len(p)+1): if p[j-1] == \u0026#34;*\u0026#34;: dp[i][j] = dp[i-1][j] or dp[i][j-1] if p[j-1] == \u0026#34;?\u0026#34; or p[j-1] == s[i-1]: dp[i][j] = dp[i-1][j-1] return dp[-1][-1] s = \u0026#34;cb\u0026#34; p = \u0026#34;?a\u0026#34; print(wildcard_matching(s, p)) 3. 背包DP 2.1 例题 Leetcode 377. Combaination Sum IV\nGiven an array of distinct integers nums and a target integer target, return the number of possible combinations that add up to target.\nThe test cases are generated so that the answer can fit in a 32-bit integer.\nExample 1:\nInput: nums = [1,2,3], target = 4\nOutput: 7\nExplanation:\nThe possible combination ways are: (1, 1, 1, 1)\n(1, 1, 2)\n(1, 2, 1)\n(1, 3)\n(2, 1, 1)\n(2, 2)\n(3, 1).\nNote that different sequences are counted as different combinations.\nExample 2:\nInput: nums = [9], target = 3\nOutput: 0\n(1) 思路\n初始状态 首先确定dp的含义，本题的dp[i]是指当target是i的时候，有多少种组合。当target=0的时候，只有一种组合那就是什么都不取，即： dp[0] = 1 状态转移方程 当target=i的时候，即dp[i]，我们需要对nums中每一个元素（num）进行判断。如果当num\u0026lt;=i的时候，那就意味着存在这种组合，那么剩下的就是取出当target=i-num的组合数，即dp[i-num]。由此可得，转移方程为： dp[i] += dp[i-num] if num \u0026lt;= i (2) Python代码\ndef combaination_sum(nums: list, target: int): dp = [0] * (target+1) dp[0] = 1 for i in range(1, target+1): for num in nums: if num \u0026lt;= i: dp[i] += dp[i-num] return dp[-1] nums = [1,2,3] target = 4 print(combaination_sum(nums, target)) 4. 递推型DP 4.1 例题 Leetcode 70. Climbing Stairs\nYou are climbing a staircase. It takes n steps to reach the top.\nEach time you can either climb 1 or 2 steps. In how many distinct ways can you climb to the top?\nExample 1:\nInput: n = 2\nOutput: 2\nExplanation: There are two ways to climb to the top.\n1 step + 1 step 2 steps Example 2:\nInput: n = 3\nOutput: 3\nExplanation: There are three ways to climb to the top.\n1 step + 1 step + 1 step 1 step + 2 steps 2 steps + 1 step (1) 思路\n初始状态 首先确定dp的含义，本题的dp[i]是指在到达第i层有多少种方法。当i=0或i=1的时候，只有一种组合那就是不走或走1步，即： dp[0] = 1, dp[1] = 1 状态转移方程 由题意可得，当我们想要到达第i层的时候，只有两种办法，一种是走了1步，另一种是走了2步。那么得知，想求dp[i]，可以求走i步到达i层(dp[i-1])和走2步到达i层(dp[i-2])的总数。由此可得，转移方程为： dp[i] = dp[i-1] + dp[i-2] (i\u0026gt;=2) (2) Python代码\ndef climbing_stairs(n: int): dp = [0] * (n+1) dp[0], dp[1] = 1, 1 for i in range(2, n+1): dp[i] = dp[i-1] + dp[i-2] return dp[-1] n = 3 print(climbing_stairs(n)) ","permalink":"https://garywy.github.io/zh/posts/study/dp_question/","summary":"前言 因为总是在动态规划问题上碰壁，所以想总结一下动态规划问题的解决办法。 DP问题基本解题思路： 初始状态 状态转移方程 1. 线性DP 1.1 例题：Leet","title":"DP_Question"},{"content":" 专辑名称: Room On Fire 歌手: The Strokes 发行时间: 2003-10-28 发行公司: 索尼音乐 ","permalink":"https://garywy.github.io/zh/music/2024-09-29/","summary":"专辑名称: Room On Fire 歌手: The Strokes 发行时间: 2003-10-28 发行公司: 索尼音乐","title":"Room On Fire"},{"content":" 专辑名称: Random Access Memories 歌手: Daft Punk 发行时间: 2013-05-17 发行公司: 索尼音乐 ","permalink":"https://garywy.github.io/zh/music/2024-09-28/","summary":"专辑名称: Random Access Memories 歌手: Daft Punk 发行时间: 2013-05-17 发行公司: 索尼音乐","title":"Random Access Memories"},{"content":"前言 本文主要为总结Markdown常用语法，以便于自已能够更好的书写Markdown文件。\n1. 基本语法 1.1 标题 利用#符号创建标题，有几个#就是几级标题。\nMarkdown 效果 # 标题1 标题1 # 标题2 标题1 # 标题3 标题1 1.2 换行 在文本后添加2个及以上空格，或添加一个空白行（按两次回车）。\n1.3 强调 粗体\n**text**或__text__ 斜体\n*text*或_text_ 斜体加粗体\n***text***或___text___ _和*可以相互替换。 1.4 引用 单段引用\n\u0026gt; Hello World! Hello World!\n多段引用 \u0026gt; Hello \u0026gt; \u0026gt; World! Hello\nWorld!\n嵌套块引用 \u0026gt; Hello \u0026gt; \u0026gt;\u0026gt; World! Hello\nWorld!\n带有其他元素的引用 \u0026gt; _Hello_ \u0026gt; \u0026gt;\u0026gt; **World**! Hello\nWorld!\n1.5 列表 有序列表 1. First 2. Second 1. S1 2. S2 3. Third First Second S1 S2 Third 无序列表\n+,-和*可相互替换。 - First - Second + S1 + S2 - Third First Second S1 S2 Third 1.6 代码块 围栏代码（可定义代码类型且显示代码高亮）,可以用```或~~~\n```python print(Hello World!) ``` print(Hello World!) 对文本使用代码块可以使用`或 `` 。\nHello World 1.7 分割线 ---,***和___均可以表示分割线。\n--- *** ___ 1.8 链接 有标题的链接 这是一个[链接](https://www.google.com/) 这是一个链接 网址 \u0026lt;https://www.google.com/\u0026gt; https://www.google.com/ 1.9 图片 显示图片 ![title](../img/display.jpeg) 给图片增加链接 [![title](../img/display.jpeg)](https://www.google.com/) 1.10 转义字符 转义字符为\\。\n\\# title # title\n","permalink":"https://garywy.github.io/zh/posts/study/markdown%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/","summary":"前言 本文主要为总结Markdown常用语法，以便于自已能够更好的书写Markdown文件。 1. 基本语法 1.1 标题 利用#符号创建标题，有几个#就是几","title":"Markdown学习笔记"},{"content":"1. 前言 原本是因为学习任务要求需要做一个Web Service，结果阴差阳错的发现了hugo这个工具。所以借此机会利用hugo制作了自己的个人博客。此篇文章内容主要包括了搭建个人网站的流程，我在其中遇到的一些问题以及解决方案，希望能对你有帮助。\n由于博主使用的是mac os，所以与windows系统可能有所差别。\n2. hugo 2.1 hugo的安装 首先利用terminal安装hugo。\nbrew install hugo 如果没有brew的同学，需要提前安装homebrew（mac os）。\n2.2 利用hugo建立博客 首先利用以下命令建立hugo博客。\nhugo new site foldername foldername填写任意你喜欢的名字，注意以后的所有操作均需要在该目录下进行。 创建成功后进入该目录，可以发现有9个文件。\narchetypes 该文件夹只有一个default.md文件，该文件内部只包含了文件头，主要的作用是每次创建新的md文件时，会按照该文件内设置的默认格式进行创建。 +++ title = \u0026#39;{{ replace .File.ContentBaseName \u0026#34;-\u0026#34; \u0026#34; \u0026#34; | title }}\u0026#39; #创建时的文件名称 date = {{ .Date }} #当前日期和时间 draft = true #是否为草稿 +++ 以下代码是在hugo中创建新md文件的方法，其中的blog为自定义，创建成功后上述代码中的title部分就会变成blog。\nhugo new blog.md content 该文件夹内部为空，需要用户自己进行添加。例如你希望你的博客里有一个关于学习的板块，那你就可以在这个目录下创建一个叫学习的文件夹。 hugo.toml 该文件是hogo的配置文件，非常重要。由于toml语法较为麻烦，且查询到的资料大都是将toml文件改成了yaml文件，所以推荐使用yaml格式的配置文件。后续会详细说明。 layouts 该文件夹在未添加主题之前为空，添加主题之后大多是html文件，用于展示各个页面。 themes 该文件夹在下载主题之后，会被保存在该目录下，不用做任何改变。 assets 用于存放css文件。 data 没用过，不太清楚是什么作用。 i18n 也没用过。 static 该文件主要可以用来储存图片。 以上是关于相关文件的介绍，没有必要很仔细的记住，后面需要的话可以返回来看一看。\n下来设置主题，需要进入Hugo Themes选择喜欢的主题。 我选择的主题是该网站的第一个主题PaperMod，需要注意的是每个主题的配置文件都不太一样，具体内容需要查看该主题相关的文档。 点击喜欢的主题之后会出现download的字样，点击download即可进入GitHub界面。 复制GitHub地址，并在终端输入以下代码。\ngit clone theme_address 将theme_address替换成你复制的GitHub地址 下载成功后会在你的根目录下找到名为该主题的文件夹，例如PaperMod下载成功后，会出现一个名为hugo-PaperMod的文件夹，将该文件夹整体移动到themes文件夹中。此后themes文件夹不需要再进行任何操作。然后在你的配置文件，也就是hugo.toml文件中添加以下内容。\ntheme = \u0026#39;theme_name\u0026#39; #theme = \u0026#39;hugo-PaperMod\u0026#39; 以上为toml文件的写法，yaml语法为以下内容。\ntheme: theme_name #theme: hugo-PaperMod 如果使用PaperMod主题，建议参照hugo博客搭建 | PaperMod主题进行配置文件的设置。 包括在content文件夹内进行的相关操作，也可以参照上述链接，讲述的非常清楚。\n2.3 hugo的启动 hugo有两种启动方式。\nhugo server hugo server -D 上述两种命令均可以启动博客，在启动成功后复制提示的网址，便可以本地进入博客。 两种命令的区别在于是否显示头文件中draft: true的md文件。 hugo server无法显示draft字段为true的文件，这点需要注意，所以可以在默认文件中将该字段改为false，这样所有新创建的md文件都会以非草稿的方式显示。\n按顺序完成上述内容便可以利用hugo完成属于自己的静态博客。 除上述链接之外还可以参照该博客内容Hugo + PaperMod搭建技术博客。\n2.4 hugo配置时遇到的问题 2.4.1 多语言 在配置文件hugo.yaml中，可以配置多种语言，例如我的配置文件中有中英双语。\nlanguages: en: languageName: \u0026#34;English\u0026#34; contentDir: content/English weight: 1 profileMode: enabled: true title: Gary\u0026#39;s House subtitle: \u0026#34;It\u0026#39;s happy to see you!\u0026#34; imageUrl: \u0026#34;img/me.jpg\u0026#34; #图片放在static/img/me.gif imageTitle: imageWidth: 150 imageHeight: 150 buttons: - name: 🧑‍💻Tech url: posts/tech ... zh: languageName: \u0026#34;中文\u0026#34; contentDir: content/Chinese weight: 1 profileMode: enabled: true title: Gary\u0026#39;s House subtitle: \u0026#34;很高兴见到你！\u0026#34; imageUrl: \u0026#34;img/me.jpg\u0026#34; #图片放在static/img/me.gif imageTitle: imageWidth: 150 imageHeight: 150 buttons: - name: 🧑‍💻技术 url: posts/tech/ ... 如果你参考了前文提到的链接中的配置文件的话，将其en后的部分复制粘贴一次，像上述所示。 为了做到多语言，需要在content文件夹下创建多个文件夹用来存放内容。如何我在content文件夹中就创建了English和Chinese两个文件夹。然后在各自的文件夹下放置各自的文件。\n2.4.2 搜索页面 搜索页面主要功能是提供站内搜索。PaperMod主题提供了search.html，所以我们只需要做两件事情。\n在与posts文件夹处于同级目录下，创建search.md，更改头文件内容。 +++ title = \u0026#34;Search\u0026#34; draft = false layout = \u0026#34;search\u0026#34; +++ 然后在配置文件hugo.yaml中添加该设置。 - identifier: search name: 🔍Search url: search weight: 1 identifier和name可以更改自己喜欢的内容，url后必须是search。\n补充:\n如果需要在搜索页面中显示当前时间的话，需要修改layouts/_default/search.html。将以下内容的第6行添加到自己的search.html文件中，便可以在搜索界面显示时间。\n\u0026lt;header class=\u0026#34;page-header\u0026#34;\u0026gt; \u0026lt;h1\u0026gt;{{- (printf \u0026#34;%s\u0026amp;nbsp;\u0026#34; .Title ) | htmlUnescape -}} ... \u0026lt;/h1\u0026gt; \u0026lt;p class=\u0026#34;post-date\u0026#34;\u0026gt;{{ now.Format \u0026#34;2006-01-02\u0026#34; }}\u0026lt;/p\u0026gt; 3. GitHub Pages部署 3.1 事前准备 首先需要登录自己的GitHub账号，并且分别创建两个仓库。一个仓库为私有仓库，名字自定义，我的仓库名是my_blog，另一个仓库为公开仓库，仓库名必须为username.github.io，username是你GitHub的用户名，该仓库主要是为了更新和显示博客内容。可以在创建仓库时添加readme文件，内容任意。\n公共仓库按照下图进行操作，记得后续所有都是上传到master这个branch下。 3.2 上传本地文件至GitHub私有仓库 参考通过终端上传文件至GitHub这篇文章上传文件至GitHub仓库。\n首先来到hugo的根目录（就是包含所有hugo文件的目录），然后按照下述顺序进行文件上传。\ngit init git add . git commit -m \u0026#34;comment\u0026#34; git remote rm origin git remote add origin private_repository_url git push origin master 以上操作应该会成功将所有文件上传至私有仓库。\n其中我遇到的错误以及解决方案：\n源引用规格master没有匹配。 git branch -M master 尚未暂存以备提交的变更：修改尚未加入提交（使用 \u0026ldquo;git add\u0026rdquo; 和/或 \u0026ldquo;git commit -a\u0026rdquo;）。 git add --all git commit -m \u0026#34;comment\u0026#34; git remote rm origin git remote add origin private_repository_url git push origin master 3.3 上传本地public文件至GitHub公开仓库。 首先公开仓库的名字一定要是username.github.io。\n上传的主要流程是：\n在本地hugo的根目录下创建public文件夹。 hugo -F --cleanDestinationDir 将GitHub公开仓库克隆到本hugo根目录下，并将public内所有文件和hugo.yaml（非常重要！！）添加到本地仓库。 git clone public_repository_url cp hugo.yaml username.github.io/ mv public/* username.github.io/ cd username.github.io 上传本地仓库到GitHub git add . git commit -m \u0026#34;rebuild_site $(date)\u0026#34; git push origin master 以上为初次上传时流程，之后的上传可以通过执行脚本，自动更新。 完成上述内容时，可以在本地运行hugo，并且用设置的username.github.io去尝试，如果成功则证明可行。\n设置脚本文件，方便每次更新内容。\n脚本文件可以保存在hugo的根目录下，名字随意，我的名字是issue.sh。 hugo -F --cleanDestinationDir cp hugo.yaml public/ rm -rf username.github.io/* mv public/* username.github.io/ rm -rf public cd username.github.io/ git add . git commit -m \u0026#34;rebuild_site $(date)\u0026#34; git push -u origin +master 上述所有的username.github.io都需要换成自己的公开仓库名。 ssh文件的执行如下。\n./issue.sh 如果以上的内容顺利完成，接下来就可以进行GitHub Actions的部署。\n3.4 GitHub Actions部署 本次部署主要是让静态博客可以被其他人访问到，部署在GitHub网站中完成。\n生成token\n首先需要设置一个密钥，去到个人主页的Settings,然后找到左边最下面的Developer Settings，然后按照下述页面所示操作。 点击generate token创建key，并且记住以ghp_开头的token。\n添加token\n接下来将刚刚得到的token，添加到下图位置，名字可以为MY_BLOG。 添加workflows\n首先一定要确保当前branch为master。\n然后按下图顺序执行，最终会生成一个hugo.yml文件。 hugo.yml文件内容参考如下：\nname: pages-auto-build-deploy on: # workflow_dispatch: push: branches: - main jobs: build-and-deploy: runs-on: ubuntu-latest steps: - uses: actions/checkout@v2 with: submodules: true fetch-depth: 0 - name: Setup Hugo uses: peaceiris/actions-hugo@v2 with: hugo-version: \u0026#39;0.130.0\u0026#39; #需要更改，结合自己的hugo版本进行更改 ，利用命令hugo version可查看。 extended: true #根据hugo version查询结果判断。 - name: Build Hugo run: hugo - name: Deploy uses: peaceiris/actions-gh-pages@v3 with: GitHub_token: ${{ secrets.MY_BLOG }} # MY_BLOG为刚刚添加的token名称 publish_dir: ./public commit_message: ${{ GitHub.event.head_commit.message }} 完成以上所有操作后，可以在GitHub顶端的Actions内查看workflows是否成功启动，成功启动后任何人都可以直接利用username.github.io访问你的博客。\n4. 评论区功能实现 4.1 实现过程 直接参考Vercel 部署，非常详细，几乎没有任何问题。也可以参考该视频Twikoo Vercel 部署教程。\nMangoDB账号申请 数据库区域选择部分\n如果你在境外，选择离自己近的地区也可以，如果在境内还是建议按照推荐区域进行设置。 MangoDB连接字符串 需要记住自己设置的passward最后一步只需要复制MangoDB连接字符串既可，先不需要做更改。 Vercel账号申请\n这个地方需要注意的是，在申请页面需要登录自己的GitHub账号，并且创建一个新的仓库，名字任意。完成该步骤之后，再按照链接内容进行操作。 其他部分只要按照链接流程来，应该是不会有问题的。需要注意的是，在完成部署之后，你的vercel页面应该像下图所示，在其中需要记住红圈处的版本号。\n4.2 调整本地文件 修改comments.html文件\n文件目录在/layouts/partials/comments.html，文件内应该是空，所以直接添加以下代码。 \u0026lt;!-- Twikoo --\u0026gt; \u0026lt;div\u0026gt; \u0026lt;div class=\u0026#34;pagination__title\u0026#34;\u0026gt; \u0026lt;span class=\u0026#34;pagination__title-h\u0026#34; style=\u0026#34;font-size: 20px;\u0026#34;\u0026gt;Comments\u0026lt;/span\u0026gt; \u0026lt;hr /\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div id=\u0026#34;tcomment\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;script src=\u0026#34;https://cdn.staticfile.org/twikoo/{{ .Site.Params.twikoo.version }}/twikoo.all.min.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script\u0026gt; twikoo.init({ envId: \u0026#34;https://******/\u0026#34;, //这里填写自己的envId el: \u0026#34;#tcomment\u0026#34;, lang: \u0026#39;en-US\u0026#39;, //zh_CN path: window.TWIKOO_MAGIC_PATH||window.location.pathname, }); \u0026lt;/script\u0026gt; \u0026lt;/div\u0026gt; 修改single.html文件 文件目录在/layouts/_default/single.html，将下述三行代码添加到\u0026lt;article\u0026gt;内部的最后即可。 \u0026lt;article class=\u0026#34;post-single\u0026#34;\u0026gt; ... {{- if (.Param \u0026#34;comments\u0026#34;) }} {{- partial \u0026#34;comments.html\u0026#34; . }} {{- end }} \u0026lt;/article\u0026gt; 修改配置文件hugo.yaml\n在params内，添加twikoo的版本号，也就是vercel页面中的版本号，代码如下图所示。 params: twikoo: version: 1.6.39 完成以上步骤，便可以在自己的文章下看到评论区，并可以进行相关设置。\n参考链接 本人愚笨，参考了很多大神的博客和文章，才完成了自己博客的基本内容。很多补充内容可以参考以下链接。\nhugo博客搭建 | PaperMod主题 Hugo + PaperMod搭建技术博客 将hugo博客部署到github Hugo+Github Pages+Github Action博客方案之三——配置Github Action实现自动发布 ","permalink":"https://garywy.github.io/zh/posts/tech/hugo+github-pages%E5%BB%BA%E7%AB%8B%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/","summary":"1. 前言 原本是因为学习任务要求需要做一个Web Service，结果阴差阳错的发现了hugo这个工具。所以借此机会利用hugo制作了自己的个人博","title":"Hugo+GitHubpages建立个人博客"},{"content":"姓名: Gary 性别: 男性 邮箱: gary510wyl@gmail.com 职业: 学生 ","permalink":"https://garywy.github.io/zh/about/","summary":"姓名: Gary 性别: 男性 邮箱: gary510wyl@gmail.com 职业: 学生","title":"关于"}]