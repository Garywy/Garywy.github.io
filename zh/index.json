[{"content":" 专辑名称: Melophobia 歌手: Cage the Elephant 发行时间: 2013-10-08 发行公司: 索尼音乐 ","permalink":"https://garywy.github.io/zh/music/2024-10-04/","summary":"专辑名称: Melophobia 歌手: Cage the Elephant 发行时间: 2013-10-08 发行公司: 索尼音乐","title":"Melophobia"},{"content":" 专辑名称: Silence Between Songs 歌手: Madison Beer 发行时间: 2023-09-15 发行公司: 索尼音乐 ","permalink":"https://garywy.github.io/zh/music/2024-10-02/","summary":"专辑名称: Silence Between Songs 歌手: Madison Beer 发行时间: 2023-09-15 发行公司: 索尼音乐","title":"Silence Between Songs"},{"content":" 专辑名称: NEVER ENOUGH 歌手: Daniel Caesar 发行时间: 2023-04-07 发行公司: Republic Records ","permalink":"https://garywy.github.io/zh/music/2024-10-01/","summary":"专辑名称: NEVER ENOUGH 歌手: Daniel Caesar 发行时间: 2023-04-07 发行公司: Republic Records","title":"NEVER ENOUGH"},{"content":" 专辑名称: In the Aeroplane Over the Sea 歌手: Neutral Milk Hotel 发行时间: 1998-02-20 发行公司: Merge Records ","permalink":"https://garywy.github.io/zh/music/2024-09-30/","summary":"专辑名称: In the Aeroplane Over the Sea 歌手: Neutral Milk Hotel 发行时间: 1998-02-20 发行公司: Merge Records","title":"In the Aeroplane Over the Sea"},{"content":" 专辑名称: Room On Fire 歌手: The Strokes 发行时间: 2003-10-28 发行公司: 索尼音乐 ","permalink":"https://garywy.github.io/zh/music/2024-09-29/","summary":"专辑名称: Room On Fire 歌手: The Strokes 发行时间: 2003-10-28 发行公司: 索尼音乐","title":"Room On Fire"},{"content":" 专辑名称: Random Access Memories 歌手: Daft Punk 发行时间: 2013-05-17 发行公司: 索尼音乐 ","permalink":"https://garywy.github.io/zh/music/2024-09-28/","summary":"专辑名称: Random Access Memories 歌手: Daft Punk 发行时间: 2013-05-17 发行公司: 索尼音乐","title":"Random Access Memories"},{"content":"前言 本文主要为总结Markdown常用语法，以便于自已能够更好的书写Markdown文件。\n1. 基本语法 1.1 标题 利用#符号创建标题，有几个#就是几级标题。\nMarkdown 效果 # 标题1 标题1 # 标题2 标题1 # 标题3 标题1 1.2 换行 在文本后添加2个及以上空格，或添加一个空白行（按两次回车）。\n1.3 强调 粗体\n**text**或__text__ 斜体\n*text*或_text_ 斜体加粗体\n***text***或___text___ _和*可以相互替换。 1.4 引用 单段引用\n\u0026gt; Hello World! Hello World!\n多段引用 \u0026gt; Hello \u0026gt; \u0026gt; World! Hello\nWorld!\n嵌套块引用 \u0026gt; Hello \u0026gt; \u0026gt;\u0026gt; World! Hello\nWorld!\n带有其他元素的引用 \u0026gt; _Hello_ \u0026gt; \u0026gt;\u0026gt; **World**! Hello\nWorld!\n1.5 列表 有序列表 1. First 2. Second 1. S1 2. S2 3. Third First Second S1 S2 Third 无序列表\n+,-和*可相互替换。 - First - Second + S1 + S2 - Third First Second S1 S2 Third 1.6 代码块 围栏代码（可定义代码类型且显示代码高亮）,可以用```或~~~\n```python print(Hello World!) ``` print(Hello World!) 对文本使用代码块可以使用`或 `` 。\nHello World 1.7 分割线 ---,***和___均可以表示分割线。\n--- *** ___ 1.8 链接 有标题的链接 这是一个[链接](https://www.google.com/) 这是一个链接 网址 \u0026lt;https://www.google.com/\u0026gt; https://www.google.com/ 1.9 图片 显示图片 ![title](../img/display.jpeg) 给图片增加链接 [![title](../img/display.jpeg)](https://www.google.com/) 1.10 转义字符 转义字符为\\。\n\\# title # title\n","permalink":"https://garywy.github.io/zh/posts/study/markdown%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/","summary":"前言 本文主要为总结Markdown常用语法，以便于自已能够更好的书写Markdown文件。 1. 基本语法 1.1 标题 利用#符号创建标题，有几个#就是几","title":"Markdown学习笔记"},{"content":"1. 前言 原本是因为学习任务要求需要做一个Web Service，结果阴差阳错的发现了hugo这个工具。所以借此机会利用hugo制作了自己的个人博客。此篇文章内容主要包括了搭建个人网站的流程，我在其中遇到的一些问题以及解决方案，希望能对你有帮助。\n由于博主使用的是mac os，所以与windows系统可能有所差别。\n2. hugo 2.1 hugo的安装 首先利用terminal安装hugo。\nbrew install hugo 如果没有brew的同学，需要提前安装homebrew（mac os）。\n2.2 利用hugo建立博客 首先利用以下命令建立hugo博客。\nhugo new site foldername foldername填写任意你喜欢的名字，注意以后的所有操作均需要在该目录下进行。 创建成功后进入该目录，可以发现有9个文件。\narchetypes 该文件夹只有一个default.md文件，该文件内部只包含了文件头，主要的作用是每次创建新的md文件时，会按照该文件内设置的默认格式进行创建。 +++ title = \u0026#39;{{ replace .File.ContentBaseName \u0026#34;-\u0026#34; \u0026#34; \u0026#34; | title }}\u0026#39; #创建时的文件名称 date = {{ .Date }} #当前日期和时间 draft = true #是否为草稿 +++ 以下代码是在hugo中创建新md文件的方法，其中的blog为自定义，创建成功后上述代码中的title部分就会变成blog。\nhugo new blog.md content 该文件夹内部为空，需要用户自己进行添加。例如你希望你的博客里有一个关于学习的板块，那你就可以在这个目录下创建一个叫学习的文件夹。 hugo.toml 该文件是hogo的配置文件，非常重要。由于toml语法较为麻烦，且查询到的资料大都是将toml文件改成了yaml文件，所以推荐使用yaml格式的配置文件。后续会详细说明。 layouts 该文件夹在未添加主题之前为空，添加主题之后大多是html文件，用于展示各个页面。 themes 该文件夹在下载主题之后，会被保存在该目录下，不用做任何改变。 assets 用于存放css文件。 data 没用过，不太清楚是什么作用。 i18n 也没用过。 static 该文件主要可以用来储存图片。 以上是关于相关文件的介绍，没有必要很仔细的记住，后面需要的话可以返回来看一看。\n下来设置主题，需要进入Hugo Themes选择喜欢的主题。 我选择的主题是该网站的第一个主题PaperMod，需要注意的是每个主题的配置文件都不太一样，具体内容需要查看该主题相关的文档。 点击喜欢的主题之后会出现download的字样，点击download即可进入GitHub界面。 复制GitHub地址，并在终端输入以下代码。\ngit clone theme_address 将theme_address替换成你复制的GitHub地址 下载成功后会在你的根目录下找到名为该主题的文件夹，例如PaperMod下载成功后，会出现一个名为hugo-PaperMod的文件夹，将该文件夹整体移动到themes文件夹中。此后themes文件夹不需要再进行任何操作。然后在你的配置文件，也就是hugo.toml文件中添加以下内容。\ntheme = \u0026#39;theme_name\u0026#39; #theme = \u0026#39;hugo-PaperMod\u0026#39; 以上为toml文件的写法，yaml语法为以下内容。\ntheme: theme_name #theme: hugo-PaperMod 如果使用PaperMod主题，建议参照hugo博客搭建 | PaperMod主题进行配置文件的设置。 包括在content文件夹内进行的相关操作，也可以参照上述链接，讲述的非常清楚。\n2.3 hugo的启动 hugo有两种启动方式。\nhugo server hugo server -D 上述两种命令均可以启动博客，在启动成功后复制提示的网址，便可以本地进入博客。 两种命令的区别在于是否显示头文件中draft: true的md文件。 hugo server无法显示draft字段为true的文件，这点需要注意，所以可以在默认文件中将该字段改为false，这样所有新创建的md文件都会以非草稿的方式显示。\n按顺序完成上述内容便可以利用hugo完成属于自己的静态博客。 除上述链接之外还可以参照该博客内容Hugo + PaperMod搭建技术博客。\n2.4 hugo配置时遇到的问题 2.4.1 多语言 在配置文件hugo.yaml中，可以配置多种语言，例如我的配置文件中有中英双语。\nlanguages: en: languageName: \u0026#34;English\u0026#34; contentDir: content/English weight: 1 profileMode: enabled: true title: Gary\u0026#39;s House subtitle: \u0026#34;It\u0026#39;s happy to see you!\u0026#34; imageUrl: \u0026#34;img/me.jpg\u0026#34; #图片放在static/img/me.gif imageTitle: imageWidth: 150 imageHeight: 150 buttons: - name: 🧑‍💻Tech url: posts/tech ... zh: languageName: \u0026#34;中文\u0026#34; contentDir: content/Chinese weight: 1 profileMode: enabled: true title: Gary\u0026#39;s House subtitle: \u0026#34;很高兴见到你！\u0026#34; imageUrl: \u0026#34;img/me.jpg\u0026#34; #图片放在static/img/me.gif imageTitle: imageWidth: 150 imageHeight: 150 buttons: - name: 🧑‍💻技术 url: posts/tech/ ... 如果你参考了前文提到的链接中的配置文件的话，将其en后的部分复制粘贴一次，像上述所示。 为了做到多语言，需要在content文件夹下创建多个文件夹用来存放内容。如何我在content文件夹中就创建了English和Chinese两个文件夹。然后在各自的文件夹下放置各自的文件。\n2.4.2 搜索页面 搜索页面主要功能是提供站内搜索。PaperMod主题提供了search.html，所以我们只需要做两件事情。\n在与posts文件夹处于同级目录下，创建search.md，更改头文件内容。 +++ title = \u0026#34;Search\u0026#34; draft = false layout = \u0026#34;search\u0026#34; +++ 然后在配置文件hugo.yaml中添加该设置。 - identifier: search name: 🔍Search url: search weight: 1 identifier和name可以更改自己喜欢的内容，url后必须是search。\n补充:\n如果需要在搜索页面中显示当前时间的话，需要修改layouts/_default/search.html。将以下内容的第6行添加到自己的search.html文件中，便可以在搜索界面显示时间。\n\u0026lt;header class=\u0026#34;page-header\u0026#34;\u0026gt; \u0026lt;h1\u0026gt;{{- (printf \u0026#34;%s\u0026amp;nbsp;\u0026#34; .Title ) | htmlUnescape -}} ... \u0026lt;/h1\u0026gt; \u0026lt;p class=\u0026#34;post-date\u0026#34;\u0026gt;{{ now.Format \u0026#34;2006-01-02\u0026#34; }}\u0026lt;/p\u0026gt; 3. GitHub Pages部署 3.1 事前准备 首先需要登录自己的GitHub账号，并且分别创建两个仓库。一个仓库为私有仓库，名字自定义，我的仓库名是my_blog，另一个仓库为公开仓库，仓库名必须为username.github.io，username是你GitHub的用户名，该仓库主要是为了更新和显示博客内容。可以在创建仓库时添加readme文件，内容任意。\n公共仓库按照下图进行操作，记得后续所有都是上传到master这个branch下。 3.2 上传本地文件至GitHub私有仓库 参考通过终端上传文件至GitHub这篇文章上传文件至GitHub仓库。\n首先来到hugo的根目录（就是包含所有hugo文件的目录），然后按照下述顺序进行文件上传。\ngit init git add . git commit -m \u0026#34;comment\u0026#34; git remote rm origin git remote add origin private_repository_url git push origin master 以上操作应该会成功将所有文件上传至私有仓库。\n其中我遇到的错误以及解决方案：\n源引用规格master没有匹配。 git branch -M master 尚未暂存以备提交的变更：修改尚未加入提交（使用 \u0026ldquo;git add\u0026rdquo; 和/或 \u0026ldquo;git commit -a\u0026rdquo;）。 git add --all git commit -m \u0026#34;comment\u0026#34; git remote rm origin git remote add origin private_repository_url git push origin master 3.3 上传本地public文件至GitHub公开仓库。 首先公开仓库的名字一定要是username.github.io。\n上传的主要流程是：\n在本地hugo的根目录下创建public文件夹。 hugo -F --cleanDestinationDir 将GitHub公开仓库克隆到本hugo根目录下，并将public内所有文件和hugo.yaml（非常重要！！）添加到本地仓库。 git clone public_repository_url cp hugo.yaml username.github.io/ mv public/* username.github.io/ cd username.github.io 上传本地仓库到GitHub git add . git commit -m \u0026#34;rebuild_site $(date)\u0026#34; git push origin master 以上为初次上传时流程，之后的上传可以通过执行脚本，自动更新。 完成上述内容时，可以在本地运行hugo，并且用设置的username.github.io去尝试，如果成功则证明可行。\n设置脚本文件，方便每次更新内容。\n脚本文件可以保存在hugo的根目录下，名字随意，我的名字是issue.sh。 hugo -F --cleanDestinationDir cp hugo.yaml public/ rm -rf username.github.io/* mv public/* username.github.io/ rm -rf public cd username.github.io/ git add . git commit -m \u0026#34;rebuild_site $(date)\u0026#34; git push -u origin +master 上述所有的username.github.io都需要换成自己的公开仓库名。 ssh文件的执行如下。\n./issue.sh 如果以上的内容顺利完成，接下来就可以进行GitHub Actions的部署。\n3.4 GitHub Actions部署 本次部署主要是让静态博客可以被其他人访问到，部署在GitHub网站中完成。\n生成token\n首先需要设置一个密钥，去到个人主页的Settings,然后找到左边最下面的Developer Settings，然后按照下述页面所示操作。 点击generate token创建key，并且记住以ghp_开头的token。\n添加token\n接下来将刚刚得到的token，添加到下图位置，名字可以为MY_BLOG。 添加workflows\n首先一定要确保当前branch为master。\n然后按下图顺序执行，最终会生成一个hugo.yml文件。 hugo.yml文件内容参考如下：\nname: pages-auto-build-deploy on: # workflow_dispatch: push: branches: - main jobs: build-and-deploy: runs-on: ubuntu-latest steps: - uses: actions/checkout@v2 with: submodules: true fetch-depth: 0 - name: Setup Hugo uses: peaceiris/actions-hugo@v2 with: hugo-version: \u0026#39;0.130.0\u0026#39; #需要更改，结合自己的hugo版本进行更改 ，利用命令hugo version可查看。 extended: true #根据hugo version查询结果判断。 - name: Build Hugo run: hugo - name: Deploy uses: peaceiris/actions-gh-pages@v3 with: GitHub_token: ${{ secrets.MY_BLOG }} # MY_BLOG为刚刚添加的token名称 publish_dir: ./public commit_message: ${{ GitHub.event.head_commit.message }} 完成以上所有操作后，可以在GitHub顶端的Actions内查看workflows是否成功启动，成功启动后任何人都可以直接利用username.github.io访问你的博客。\n4. 评论区功能实现 4.1 实现过程 直接参考Vercel 部署，非常详细，几乎没有任何问题。也可以参考该视频Twikoo Vercel 部署教程。\nMangoDB账号申请 数据库区域选择部分\n如果你在境外，选择离自己近的地区也可以，如果在境内还是建议按照推荐区域进行设置。 MangoDB连接字符串 需要记住自己设置的passward最后一步只需要复制MangoDB连接字符串既可，先不需要做更改。 Vercel账号申请\n这个地方需要注意的是，在申请页面需要登录自己的GitHub账号，并且创建一个新的仓库，名字任意。完成该步骤之后，再按照链接内容进行操作。 其他部分只要按照链接流程来，应该是不会有问题的。需要注意的是，在完成部署之后，你的vercel页面应该像下图所示，在其中需要记住红圈处的版本号。\n4.2 调整本地文件 修改comments.html文件\n文件目录在/layouts/partials/comments.html，文件内应该是空，所以直接添加以下代码。 \u0026lt;!-- Twikoo --\u0026gt; \u0026lt;div\u0026gt; \u0026lt;div class=\u0026#34;pagination__title\u0026#34;\u0026gt; \u0026lt;span class=\u0026#34;pagination__title-h\u0026#34; style=\u0026#34;font-size: 20px;\u0026#34;\u0026gt;Comments\u0026lt;/span\u0026gt; \u0026lt;hr /\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div id=\u0026#34;tcomment\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;script src=\u0026#34;https://cdn.staticfile.org/twikoo/{{ .Site.Params.twikoo.version }}/twikoo.all.min.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script\u0026gt; twikoo.init({ envId: \u0026#34;https://******/\u0026#34;, //这里填写自己的envId el: \u0026#34;#tcomment\u0026#34;, lang: \u0026#39;en-US\u0026#39;, //zh_CN path: window.TWIKOO_MAGIC_PATH||window.location.pathname, }); \u0026lt;/script\u0026gt; \u0026lt;/div\u0026gt; 修改single.html文件 文件目录在/layouts/_default/single.html，将下述三行代码添加到\u0026lt;article\u0026gt;内部的最后即可。 \u0026lt;article class=\u0026#34;post-single\u0026#34;\u0026gt; ... {{- if (.Param \u0026#34;comments\u0026#34;) }} {{- partial \u0026#34;comments.html\u0026#34; . }} {{- end }} \u0026lt;/article\u0026gt; 修改配置文件hugo.yaml\n在params内，添加twikoo的版本号，也就是vercel页面中的版本号，代码如下图所示。 params: twikoo: version: 1.6.39 完成以上步骤，便可以在自己的文章下看到评论区，并可以进行相关设置。\n参考链接 本人愚笨，参考了很多大神的博客和文章，才完成了自己博客的基本内容。很多补充内容可以参考以下链接。\nhugo博客搭建 | PaperMod主题 Hugo + PaperMod搭建技术博客 将hugo博客部署到github Hugo+Github Pages+Github Action博客方案之三——配置Github Action实现自动发布 ","permalink":"https://garywy.github.io/zh/posts/tech/hugo+github-pages%E5%BB%BA%E7%AB%8B%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/","summary":"1. 前言 原本是因为学习任务要求需要做一个Web Service，结果阴差阳错的发现了hugo这个工具。所以借此机会利用hugo制作了自己的个人博","title":"Hugo+GitHubpages建立个人博客"},{"content":"姓名: Gary 性别: 男性 邮箱: gary510wyl@gmail.com 职业: 学生 ","permalink":"https://garywy.github.io/zh/about/","summary":"姓名: Gary 性别: 男性 邮箱: gary510wyl@gmail.com 职业: 学生","title":"关于"}]