[{"content":" Album Name: NEVER ENOUGH Singer: Daniel Caesar Release Time: 2023-04-07 Record Company: Republic Records ","permalink":"https://garywy.github.io/en/music/2024-10-01/","summary":" Album Name: NEVER ENOUGH Singer: Daniel Caesar Release Time: 2023-04-07 Record Company: Republic Records ","title":"NEVER ENOUGH"},{"content":" Album Name: In the Aeroplane Over the Sea Singer: Neutral Milk Hotel Release Time: 1998-02-20 Record Company: Merge Records ","permalink":"https://garywy.github.io/en/music/2024-09-30/","summary":" Album Name: In the Aeroplane Over the Sea Singer: Neutral Milk Hotel Release Time: 1998-02-20 Record Company: Merge Records ","title":"In the Aeroplane Over the Sea"},{"content":" Album Name: Room On Fire Singer: The Strokes Release Time: 2003-10-28 Record Company: Á¥¢Â∞ºÈü≥‰πê ","permalink":"https://garywy.github.io/en/music/2024-09-29/","summary":"Album Name: Room On Fire Singer: The Strokes Release Time: 2003-10-28 Record Company: Á¥¢Â∞ºÈü≥‰πê","title":"Room On Fire"},{"content":" Album Name: Random Access Memories Singer: Daft Punk Release Time: 2013-05-17 Record Company: Á¥¢Â∞ºÈü≥‰πê ","permalink":"https://garywy.github.io/en/music/2024-09-28/","summary":"Album Name: Random Access Memories Singer: Daft Punk Release Time: 2013-05-17 Record Company: Á¥¢Â∞ºÈü≥‰πê","title":"Random Access Memories"},{"content":"1. Preface Originally, I was required to create a web service for a school project, but I accidentally discovered the hugo tool. So I took this opportunity to use hugo to create my own personal blog. This article mainly covers the process of setting up a personal website, some of the problems I encountered and the solutions, I hope it will be helpful to you.\nSince the blogger is using mac os, there may be some differences from the windows system.\n2. hugo 2.1 hugo installation First, use the terminal to install hugo\nbrew install hugo If you don\u0026rsquo;t have brew, you need to install homebrew (mac os) in advance.\n2.2 Use hugo to create a blog First, use the following command to create a hugo blog.\nhugo new site filename [filename] Fill in any name you like. Note that all future operations need to be performed in this directory. After the creation is successful, go to the directory and you will find 9 files.\narchetypes This folder only has a default.md file, which only contains the file header. Its main function is that every time a new md file is created, it will be created according to the default format set in this file. +++ title = \u0026#39;{{ replace .File.ContentBaseName ‚Äú-‚Äù ‚Äú ‚Äò | title }}‚Äô #File name when created date = {{ .Date }} #Current date and time draft = true #Whether it is a draft +++ The following code is a method for creating a new md file in hugo. The blog is customized in it, and after the creation is successful, the title part in the above code will become blog.\nhugo new blog.md content The folder is empty inside and needs to be added by the user. For example, if you want to have a section about learning in your blog, you can create a folder called learning in this directory. hugo.toml This file is the hugo configuration file and is very important. Since the toml syntax is more troublesome, and most of the information found is to convert the toml file to a yaml file, it is recommended to use a configuration file in yaml format. Details will be provided later. layouts This folder is empty before a theme is added. After a theme is added, it mostly contains html files that are used to display various pages. themes This folder is saved in this directory after downloading the theme, and no changes need to be made. assets Used to store css files. data I haven\u0026rsquo;t used it and I\u0026rsquo;m not sure what it does. i18n I haven\u0026rsquo;t used it either. static This file can be used to store images. The above is an introduction to the relevant files. There is no need to remember them carefully, and you can come back to them later if necessary.\nNext, set the theme. Go to Hugo Themes and choose a theme you like. The theme I chose is PaperMod, the first theme on the website. Note that the configuration files for each theme are different, so you need to check the documentation for that theme for details. After clicking on your favorite theme, the word ‚Äúdownload‚Äù will appear. Click ‚Äúdownload‚Äù to go to the GitHub interface. Copy the GitHub address and enter the following code in the terminal:\ngit clone theme_address Replace theme_address with the GitHub address you copied. After the download is successful, you will find a folder named after the theme in your root directory. For example, after the PaperMod download is successful, a folder named hugo-PaperMod will appear. Move the entire folder to the themes folder. After that, you don\u0026rsquo;t need to do anything with the themes folder. Then add the following content to your configuration file, which is the hugo.toml file.\ntheme = \u0026#39;theme_name\u0026#39; #theme = \u0026#39;hugo-PaperMod\u0026#39; The above is the way to write a toml file. The yaml syntax is as follows:\ntheme: theme_name #theme: hugo-PaperMod If you are using the PaperMod theme, we recommend referring to hugoÂçöÂÆ¢Êê≠Âª∫ | PaperMod‰∏ªÈ¢ò for configuration file settings. Including related operations in the content folder, you can also refer to the above link, which is very clear.\n2.3 hugo startup hugo has two startup methods.\nhugo server hugo server -D Both commands can start the blog. After successful startup, copy the URL prompted to access the blog locally. The difference between the two commands is whether to display the md file with the header filedraft: true or not. hugo server cannot display files with the draft field set to true, so you need to be aware of this. Therefore, you can change the field to false in the default file, which will make things a bit easier.\nAfter completing the above in order, you can use hugo to complete your own static blog. In addition to the above links, you can also refer to the content of this blog Hugo + PaperMod to build a technical blog.\n2.4 Problems encountered when configuring hugo 2.4.1 Multilingual In the configuration file ‚Äúhugo.yaml‚Äù, you can configure multiple languages. For example, my configuration file has both Chinese and English.\nlanguages: en: languageName: ‚ÄúEnglish‚Äù contentDir: content/English weight: 1 profileMode: enabled: true title: Gary\u0026#39;s House subtitle: ‚ÄùIt\u0026#39;s happy to see you!‚Äù imageUrl: ‚Äúimg/me.jpg‚Äù #The image is stored in static/img/me.gif imageTitle: imageWidth: 150 imageHeight: 150 buttons: - name: üßë‚ÄçüíªTech url: posts/tech ... zh: languageName: ‚ÄúChinese‚Äù contentDir: content/Chinese weight: 1 profileMode: enabled: true title: Gary\u0026#39;s House subtitle: ‚ÄúNice to meet you!‚Äù imageUrl: ‚Äòimg/me.jpg‚Äô #The image is stored in static/img/me.gif imageTitle: imageWidth: 150 imageHeight: 150 buttons: - name: üßë‚ÄçüíªÊäÄÊúØ url: posts/tech/ ... If you have referenced the configuration file in the link mentioned above, copy and paste the part after itsen once, as shown above. In order to be multilingual, you need to create multiple folders under the content folder to store the content. How I created two folders, English and Chinese, in the content folder. Then place the respective files in the respective folders.\n2.4.2 Search page The main function of the search page is to provide an internal search. The PaperMod theme provides search.html, so we only need to do two things.\nCreate search.md in the same directory as the posts folder and change the content of the header file. +++ title = ‚ÄúSearch‚Äù draft = false layout = ‚Äùsearch‚Äù +++ Then add the setting to the configuration file hugo.yaml. - identifier: search name: üîçSearch url: search weight: 1 identifier and name can be changed to your liking, and url must be followed by ``search\u0026rsquo;'.\nAddendum: If you want to display the current time on the search page, you need to modify layouts/_default/search.html. Add the following content to line 6 of your own search.html file to display the time on the search interface. html\n{{- (printf ‚Äú%s\u0026nbsp;‚Äù .Title ) | htmlUnescape -}} ... \u0026lt;p class=‚Äúpost-date‚Äù\u0026gt;{{ now.Format ‚Äú2006-01-02‚Äù }}\u0026lt;/p\u0026gt; # 3. GitHub Pages deployment ## 3.1 Preliminary preparations First, you need to log in to your GitHub account and create two repositories. One is a private repository with a custom name, mine is my_blog, and the other is a public repository with the name `username.github.io`, where `username` is your GitHub username. This repository is mainly used to update and display blog content. You can add a readme file with any content when creating the repository. Follow the steps below for the public repository. Remember to upload all subsequent content to the `master` `branch`. ![](../GitHub_private.jpg) ## 3.2 Uploading local files to a GitHub private repository Refer to the article [Uploading files to GitHub via the terminal](https://blog.csdn.net/qq_46941656/article/details/119532631) to upload files to a GitHub repository. First go to the root directory of hugo (the directory containing all hugo files), and then upload the files in the following order. ```bash git init git add . git commit -m ‚Äúcomment‚Äù git remote rm origin git remote add origin private_repository_url git push origin master The above operation should successfully upload all files to the private repository.\nThe errors I encountered and the solutions:\nThe source reference specification master does not match. git branch -M master Changes not yet staged for commit: modify not yet added to commit (use ‚Äúgit add‚Äù and/or ‚Äúgit commit -a‚Äù). git add --all git commit -m ‚Äúcomment‚Äù git remote rm origin git remote add origin private_repository_url git push origin master 3.3 Upload the local public files to the GitHub public repository. First, the name of the public repository must be username.github.io. The main process for uploading is:\nCreate a public folder in the root directory of the local hugo. hugo -F --cleanDestinationDir Clone the GitHub public repository to the root directory of this hugo, and add all files in public and ``hugo.yaml``` (very important!) to the local repository. git clone public_repository_url cp hugo.yaml username.github.io/ mv public/* username.github.io/ cd username.github.io Upload the local repository to GitHub git add . git commit -m ‚Äúrebuild_site $(date)‚Äù git push origin master The above is the process for the first upload. Subsequent uploads can be automated by executing the script. After completing the above, you can run hugo locally and try it with the set username.github.io. If it is successful, it proves to be feasible.\nSet up a script file to facilitate updating content each time. The script file can be saved in the root directory of hugo with any name. Mine is ``issue.sh\u0026rsquo;'. hugo -F --cleanDestinationDir cp hugo.yaml public/ rm -rf username.github.io/* mv public/* username.github.io/ rm -rf public cd username.github.io/ git add . git commit -m ‚Äúrebuild_site $(date)‚Äù git push -u origin +master All the above ‚Äòusername.github.io‚Äô needs to be replaced with ‚Äòyour own public repository name‚Äô. The ssh file is executed as follows:\n./issue.sh If the above is successfully completed, you can proceed to deploy GitHub Actions.\n3.4 GitHub Actions deployment This deployment is mainly to allow the static blog to be accessed by others, and is deployed on the GitHub website.\nGenerate a token First, you need to set a key. Go to your personal homepage, click Settings'', then find Developer Settings\u0026rsquo;\u0026rsquo; at the bottom left, and follow the instructions on the page. Click ‚Äúgenerate token‚Äù to create a key and remember the token that starts with ‚Äúghp_‚Äù.\nAdd token Next, add the token you just got to the location shown below. The name can be MY_BLOG. Add workflows First, make sure that the current branch is master. Then, execute the following steps in the order shown below to generate a hugo.yml file. The content of the hugo.yml file is as follows:\nyml name: pages-auto-build-deploy on:\nworkflow_dispatch: push: branches: - main\njobs: build-and-deploy: runs-on: ubuntu-latest steps: - uses: actions/checkout@v2 with: submodules: true fetch-depth: 0\n- name: Setup Hugo uses: peaceiris/actions-hugo@v2 with: hugo-version: '0.130.0' #You need to change this according to your own Hugo version. You can view the version with the command hugo version. extended: true #Determined based on the query result of hugo version. - name: Build Hugo run: hugo - name: Deploy uses: peaceiris/actions-gh-pages@v3 with: GitHub_token: ${{ secrets.MY_BLOG }} # MY_BLOG is the token name just added publish_dir: ./public commit_message: ${{ GitHub.event.head_commit.message }} After completing all the above operations, you can go to GitHub top and click ```Actions``` to check whether the workflow has been started successfully. After successful startup, anyone can directly access your blog using ```username.github.io``` . # Reference links I am stupid, and I have only completed the basic content of my blog after referring to the blogs and articles of many great gods. You can refer to the following links for a lot of additional content. 1. [Hugo blog setup | PaperMod theme](https://www.sulvblog.cn/posts/blog/build_hugo/) 2. [Hugo + PaperMod setup technical blog](https://kyxie.github.io/zh/blog/tech/papermod/) 3. [Deploying a hugo blog to github](https://www.wenhui.space/docs/04-build-blog-site/hugo_deploy_to_github/) 4. [Hugo+Github Pages+Github Action blog plan 3 ‚Äì Configuring Github Action to enable automatic publishing](https://juejin.cn/post/7148029123263528974) ","permalink":"https://garywy.github.io/en/posts/tech/hugo_githubpages/","summary":"1. Preface Originally, I was required to create a web service for a school project, but I accidentally discovered the hugo tool. So I took this opportunity to use hugo to create my own personal blog. This article mainly covers the process of setting up a personal website, some of the problems I encountered and the solutions, I hope it will be helpful to you. Since the blogger is using","title":"Hugo_githubpages"},{"content":"NAME: Gary GENDER: Male EMAIL: gary510wyl@gmail.com OCCUPATION: Student ","permalink":"https://garywy.github.io/en/about/","summary":"NAME: Gary GENDER: Male EMAIL: gary510wyl@gmail.com OCCUPATION: Student ","title":"About"}]