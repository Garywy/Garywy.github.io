[{"content":"The research is about a question with a wrong presupposition, and we need to correct the presupposition and give a correct result.\nCREPE: Open-Domain Question Answering with False Presuppositions üéØ Target The authors introduced CREPE, a QA dataset containing a natural distribution of presupposition failures from online information-seeking forums.\nüì¶ Dataset CREPE, a QA dataset containing a natural distribution of presupposition failures from online information-seeking forums.\nData Source: Reddit, the ELI5 subreddit.\nData Numbers: 8,400 Reddit questions with:\nLabels (whether there are any false presuppositions). The false presuppositions and their corrections, if there are any false presuppositions in questions. üõ†Ô∏è Construction The questions in Reddit, and the most upvoted comments written by community users.\n1.1 Criteria and Solutions Naturalness of the questions -\u0026gt; C1\nIf the questions are written by real, information-seeking users.\nC1\u0026rsquo;s solution:\nQuestions posted on the ELI5 subreddit. Filter questions and comments based on upvotes with a higher threshold. Split the training, the development, and the test data based on the time of the posting. The training set: posted in 2011-2018 The development set: posted in Jan-Jun of 2019 The test set: posted in Jul-Dec of 2019 Validity of the presupposition -\u0026gt; C2\nIf the identified presupposition is highly likely made by the question writer.\nCorrectness and adequacy of the information -\u0026gt; C3\nIf the correction is factually correct and adequate to convince the question writer.\nC2 \u0026amp; C3\u0026rsquo;s solution:\nBased on the most upvoted comments.\nC2: If the comment identifying a false presupposition has the most upvotes, it is likely that the presupposition is valid (made by the question writer). Personal Replenish of valid: The false presupposition in the original question was indeed posed by the question writer rather than misinterpreted or incorrectly inferred by the community users. C3: If the comment identifying a false presupposition has the most upvotes, it is highly likely to contain information that is correct and adequate. 1.2 Annotation tasks Input: Question(1) and the most voted comment(1)\nFilter out questions (subjective, uninformative, or rely on personal experience). Judge the most voted comment (whether a false presupposition in the question is identified). If there is a false presupposition (the most voted comment identified a false presupposition in the question), write the presupposition and a correction as a concise, declarative sentence. Pipeline:\n1 question was annotated by 2 annotators Step 1: If either of the annotators filtered out this question, then filter this question out. Step 2 \u0026amp; 3: If the two annotators had the same label in this question (i.e., both of them consider the question to contain the false presupposition or not to contain the false presupposition), then the label and the corrections written by the two annotators are taken as Gold Reference. Otherwise, assign a third annotator to judge this question. üìñ Task 1. The main track Input: Question Only\nApproach: Search necessary background knowledge to perform the task from any information source except for Reddit and Quora.\n2. The GOLD-COMMENT track Input: Question and The most voted comment\nApproach: No search\nüß™ Experiments 1. Detection Judge whether there is a false presupposition in the question.\n(1) Trivial baselines Approach (Nearest Neighbor): Randomly assign FP (False Presupposition) or N (No false presupposition) uniformly. FP only always assigns FP. N only always assigns N.\nModel: c-REALM\n(2) GOLD-COMMENT track baselines Three classifiers based on CREPE datasets:\nQuestion only trains a RoBERTa-based classifier. (Doesn\u0026rsquo;t specify whether this classifier is based on RoBERTa-large). Comment only trains a RoBERTa-large-based classifier. Question‚äïComment trains a RoBERTa-large-based classifier.\nSame classifiers based on MNLI \u0026amp; BoolQ datasets, and tested on CREPE in a zero-shot fashion. (3) Main track baselines Input: Question\nOutput: The likelihood of the question having false presuppositions or not.\nRetrieve a set of k passages from the English Wikipedia by the c-REALM model. Concatenate the question and k passages to assign the likelihood of the question having false presuppositions or not by Softmax.\nModel: RoBERTa Special Operation (Self-labeling) Target: To label the unlabeled training questions.\nUse the Question‚äïComment to assign a silver label to the unlabeled training questions. Then train the classifier on the union of this silver data as well as the gold labeled data. (4) Human performance Two human workers perform the task for 186 questions for each track.\nHuman with the most voted comment: Assume the most voted comment as a ground truth in terms of factuality of the information and the validity of the presupposition. Human without the most voted comment: Human workers search over the web (except Quora and Reddit) to find information and make the best judgment about the validity of the presupposition. 2. Writing Give a question that contains a false presupposition, and it is required to generate the presupposition as well as the correction.\n(1) GOLD-COMMENT track baselines Copy baseline: Copy the question as a false presupposition and use the comment as a correction.\nQuestion‚äïComment Dedicated: Use a pretrained T5-base model to train two separate generators. The input is a concatenation of the question and the comment. One generator extracts the false presupposition from the question, while the other generates the correction.\nQuestion‚äïComment Unified: Design a unified model that can be used for both the presupposition and the correction.\nTraining:\nInput: (Question and Comment), Output: (Annotated correction) Input: (Question and Comment), Output: (\u0026ldquo;It is not the case that\u0026rdquo; + false presupposition) Generation:\nCorrection: Use a standard, beam search decoding to generate the correction. Presupposition: To generate the presupposition, we first decode a sequence with a constraint that it should start with ‚ÄúIt is not the case that,‚Äù and then take the sequence that comes next as a presupposition. (2) Main track baselines The baselines are similar to Question‚äïComment Dedicated and Question‚äïComment Unified models in the GOLD-COMMENT track.\nThe only difference is that the model receives a question and a set of k passages from c-REALM instead of a question-comment pair.\nUse the Fusion-in-Decoder architecture to read multiple passages.\nüìä Results Detection Experiment Results Writing Experiment Results ‚ö†Ô∏è Limitations Use the most upvoted comments that are not perfect. One avenue for future work is to consider extra-linguistic context such as individuals\u0026rsquo; backgrounds when judging the validity of presuppositions. This research does not include large-scale models. The researchers conducted a small-scale case study with GPT-3 text-davinci-002, but most generations are roughly on the right topic. The domain of CREPE is limited to online forums (Reddit). It is necessary to study false presuppositions on a broader set of domains that require domain expertise. Reference:\nXinyan Velocity Yu, Sewon Min, Luke Zettlemoyer, and Hannaneh Hajishirzi. CREPE: Open-domain question answering with false presuppositions. In Annual Meeting of the Association for Computational Linguistics, 2022. Evaluating Large Language Models for Health-related Queries with Presuppositions üéØ Target Construct a dataset of health-related queries with varying degrees of presupposition: UPHILL Evaluate factual accuracy and consistency of InstructGPT, ChatGPT, GPT-4 and Bing Copilot. üì¶ Dataset UPHILL, a dataset consisting of health-related queries with varying degrees of presuppositions.\nSource:\nPubHealth Monant Medical Misinformation Size:\n1945 claims √ó 5 degrees = 9725 presuppositions True: 766 False: 854 Mixture: 159 Fabricated: 166 Claim Sources:\nTrue, False, Mixture: From PubHealth and Monant Fabricated: From templates E.g., \u0026ldquo;[Action] treats [disease]\u0026rdquo;, \u0026ldquo;[Symptom] indicates [disease]\u0026rdquo; Slot-filled using terms from NHS health info Paraphrased using GPT-3.5-turbo üõ†Ô∏è Construction 1. Query Generation For each claim, generate 5 different degrees\u0026rsquo; presuppositions by templetes. Degree Description 0 (Neutral) No assumptions; curious, factual inquiry 1 (Mild) Suggestive query with tentative belief 2 (Unequivocal) Clear presupposition invoking scientific legitimacy 3 (Writing Request) Request to write a report/article supporting the claim 4 (Writing Demand) Assertive demand for evidence-backed writing \u0026amp; citations Templetes 2. Entailment Model (InstructGPT, ChatGPT, GPT-4 and Bing Copilot) Feed into 4 models ‚Üí obtain 5 responses per model per claim Check relation between claim and model response Labels: Agreement Disagreement Neither 3. Metrics Accuracy\nA response is accurate if: It agrees with a true claim It disagrees with a false claim Consistency\nA model is consistent if it maintains the same stance across all 5 responses for the same claim üìä Results InstructGPT: Most susceptible to presuppositions Bing Copilot: Most robust Visual Results: üìÑ P14312 Table 3 \u0026amp; 4 üìä P14313 Figure 2 üìÑ P14314 Table 5 ‚ö†Ô∏è Limitations Entailment Model:\nUsed for evaluating agreement/disagreement; not perfectly reliable despite validation.\nTemplate-Based Queries:\nSimulate realistic search queries but don‚Äôt reflect actual user behavior (due to lack of search logs).\nGeographical Bias:\nClaims are mostly U.S.-based ‚Üí limits global generalizability.\nEvaluation Scope:\nEvaluates factual accuracy only at the response level; does not perform fine-grained analysis.\nReference:\nNavreet Kaur, Monojit Choudhury, and Danish Pruthi. Evaluating large language models for health-related queries with presuppositions. In Findings of the Association for Computational Linguistics: ACL 2024, 2024. (QA)¬≤: Question Answering with Questionable Assumptions üéØ Target Construct a dataset to be an evaluation set with the goal of testing robustness to questionable assumptions.\nüì¶ Dataset (QA)¬≤ (Question Answering with Questionable Assumptions)\nData Source: NQ dataset by Google‚Äôs autocompletion API Data Size: 602 expert-annotated questions 50% contain questionable assumptions 50% are typical information-seeking questions (no questionable assumptions) Adaptation Set: 16 questions with questionable assumptions 16 questions without questionable assumptions Used for few-shot tuning or in-context demonstrations üõ†Ô∏è Construction 1. Question Collection Scraped English wh-questions using API with prefix strings: why, what, where, etc. Applied automatic filtering: Removed duplicates and bad/non-questions Used a stop word list (e.g., quizlet, brainly, lyrics) Imperfect data retained: syntax/tense errors allowed, since it reflects real data 2. Annotation Task (Crowdsourced) Annotators: 23 qualified workers from Amazon Mechanical Turk Goal: Flag whether a question contains a questionable assumption Type: Binary classification Data: 12,000 questions Each question reviewed by 5 annotators 1 annotation set = 20 questions (18 unlabeled + 2 labeled) Quality check: On average, 86% of annotators labeled the control questions correctly 3. Annotation Task (Expert) Annotators: 3 expert annotators (authors) Scope: Almost 720 questions(6% of 12,000) flagged by at least one crowdworker Process: Each expert ‚Üí half of the questions independently annotate(Annotate the label, and give the abstract answer and its evidence) The last expert ‚Üí verify the result of annotations(disagreements via adjudication) Final selection criteria: (C1) Flagged by at least 1 worker (C2) Justification for the abstractive answer can be found online (C3) No immediate ambiguity in question interpretation üìñ Tasks 1. End-to-End Abstractive QA (End-to-end QA) Input: Question Output: Abstractive answer generated by the model Evaluation: Randomly sample 100 answers Judged by 5 human raters from Prolific(refer to the answers given by experts) Use majority vote to determine acceptability (% acceptable reported) 2. Questionable Assumption Detection (Detection) Input: Question Goal: Detect whether it contains false or unverifiable assumptions Framing: Binary classification (Yes / No) Template examples: \u0026ldquo;Does {question} contain any invalid assumptions?\u0026rdquo; \u0026ldquo;Are any of the assumptions in {question} problematic?\u0026rdquo; 3. Questionable Assumption Verification (Verification) Input: Yes/No question derived from a questionable assumption (identified by expert) Goal: Judge the truth of the assumption Example: Original: where are the winter olympics held 2021 Assumption: the winter olympics were held in 2021 Derived question: were the winter olympics held in 2021? ‚Üí Answer: No For valid questions: randomly select a true assumption and convert it into a Yes/No question üìä Results ‚ö†Ô∏è Limitations The dataset is limited to wh-questions collected via Google\u0026rsquo;s Autocompletion API, which may not fully represent the diversity of real-world questions. Some questions with false or unverifiable assumptions might be subtle or ambiguous, making it difficult for annotators to reach consistent judgments. Verification of nonexistence relies on pragmatic inference rather than exhaustive factual proof, due to the challenge of confirming something does not exist. The oracle-based decomposition in the verification task does not reflect a real-world pipeline where assumption detection and verification must be jointly performed. Human evaluation in end-to-end QA introduces subjectivity and may vary depending on rater interpretation and context familiarity. The adaptation set is small (32 total), which may limit generalization in few-shot or in-context learning settings. Reference:\nNajoung Kim, Phu Mon Htut, Samuel R. Bowman, and Jackson Petty. (QA)2: Question answering with questionable assumptions, 2023. Won‚Äôt Get Fooled Again: Answering Questions with False Premises üéØ Target Authors annotated a FalseQA dataset containing 2365 human-written FPQs, with the corresponding explanations for the false premises and the revised true premise questions.\nüì¶ Dataset FalseQA, a dataset containing 2365 human-written FPQs, with the corresponding explanations for the false premises and the revised true premise questions.\nSource: Human-written Size: 2365 FPQs (False Premise Questions) with: Corresponding explanations of the false premises Revised TPQs (True Premise Questions) Set Count Training 1187 Validation 491 Test 687 üõ†Ô∏è Construction Step Description 1 Write FPQs based on source words (subject words from GenericsKB) 2 Revise each FPQ minimally into a TPQ (true premise question) 3 Write detailed explanations for FPQs and answers for TPQs Train/Validation: 1 explanation per question Test: 2 explanations per question üß™ Experiments 1. Discriminating FPQs (Binary Classification) Train PLMs to classify questions into FPQs and TPQs Apply prompt learning to reduce the gap between pre-training and fine-tuning 2. Impact of Training Data Size Train with 32 / 256 / 1187 training pairs Result: Accuracy grows almost linearly as data size increases exponentially 3. Answering FPQs with Explanations Step 1: Model generates discriminating token (\u0026ldquo;tricky question\u0026rdquo; or \u0026ldquo;true question\u0026rdquo;) Step 2: Model continues to generate explanation (FPQ) or answer (TPQ) Example:\nInput ‚Üí Question: Are tigers‚Äô eggs bigger than chickens‚Äô eggs?\nOutput ‚Üí tricky question. Because tigers are mammals and do not lay eggs, the question assumes a false premise.\nLoss Calculation:\nTotal loss = binary loss (‚Äútricky question‚Äù or ‚Äútrue question‚Äù) + generation loss (remaining tokens)\nDetails in Section 5.4 paragraph 2\u0026amp;3\nEvaluation:\nOnly explanation for FPQs is evaluated using ROUGE-L Two reference explanations used for test set 4. Answering Both FPQs and General Questions Use Data Replay (DR) to avoid catastrophic forgetting For every FPQ batch, add one ARC-DA batch Each group of ARC-DA samples is fixed for every 30 iterations Example: 120 batches\nBatch No. Data Type ARC-DA Sample Used 1, 3, 5, \u0026hellip;, 59 FPQ (FalseQA) - 2, 4, 6, \u0026hellip;, 60 ARC-DA ARC-DA sample A 61, 63, \u0026hellip;, 119 FPQ (FalseQA) - 62, 64, \u0026hellip;, 120 ARC-DA ARC-DA sample B ‚ö†Ô∏è Limitation Standardized response to FPQs is a rebuttal, which reflects a conventional style In real scenarios, creative responses (e.g., rhetorical questions) may be more natural Reference:\nShengding Hu, Yifan Luo, Huadong Wang, Xingyi Cheng, Zhiyuan Liu, and Maosong Sun. Won‚Äòt get fooled again: Answering questions with false premises. In Proceedings of the 61st Annual Meeting of the Association for Computational Linguistics (Volume 1: Long Papers), 2023. The difference of Presupposition, Presumption, Premise and Questionable Assumption 1. Presupposition An implicit assumption that must be true for a statement to make sense. Often taken for granted without being explicitly stated.\nExample:\n1. \u0026#34;When did you quit smoking?\u0026#34; presupposes that you used to smoke. 2. \u0026#34;John\u0026#39;s children are very well-behaved\u0026#34; presupposes that John has children. 3. \u0026#34;Could you turn down the music?\u0026#34; presupposes that music is playing. 2. presumption A belief accepted as true until proven otherwise. Often based on probability or convention rather than direct evidence.\nExample:\n1. In court, there is a presumption that the defendant is innocent until proven guilty. 2. There\u0026#39;s a presumption that people signing contracts have read and understood them. 3. premise An explicitly stated proposition that serves as the foundation for an argument. Used consciously as part of logical reasoning.\nExample:\nPremise 1: All mammals are warm-blooded. Premise 2: Whales are mammals. Conclusion: Therefore, whales are warm-blooded. Premise 1: If it\u0026#39;s raining, the ground is wet. Premise 2: It is raining. Conclusion: Therefore, the ground is wet. 4. Questionable Assumption An assumption that may be false, unwarranted, or dubious. Often identified as a weak point in reasoning that needs scrutiny.\nExample:\n1. \u0026#34;Everyone I know owns a smartphone, so virtually everyone must own a smartphone.\u0026#34; (Assumes your social circle represents the general population) 2. \u0026#34;That restaurant was empty on a Tuesday night, so it must not be very good.\u0026#34; (Assumes popularity at one specific time indicates quality) 3. \u0026#34;He didn\u0026#39;t smile when we met, so he must not like me.\u0026#34; (Assumes a single behavior reliably indicates a particular attitude) Term Simple Definition Example with \u0026ldquo;Turmeric cures cancer\u0026rdquo; Presupposition An unstated background assumption that must be true for a sentence to make sense. \u0026ldquo;Why is turmeric effective in curing cancer?\u0026rdquo; presupposes that turmeric does cure cancer ‚Äî this is taken for granted by the question. Presumption A belief automatically made based on context or common knowledge, without being stated. Hearing \u0026ldquo;Turmeric is often used in cancer treatments\u0026rdquo; might lead someone to presume it\u0026rsquo;s effective, even if that isn‚Äôt explicitly claimed or proven. Premise A clearly stated claim used as the basis of an argument. \u0026ldquo;Turmeric cures cancer\u0026rdquo; is explicitly stated to support a conclusion like \u0026ldquo;Therefore, people should take turmeric to treat cancer.\u0026rdquo; Questionable Assumption A false or unverifiable assumption likely believed by the speaker, even if not presupposed. \u0026ldquo;How much turmeric should cancer patients take daily?\u0026rdquo; assumes the speaker believes turmeric helps with cancer, even if it\u0026rsquo;s not logically presupposed. ","permalink":"https://garywy.github.io/en/posts/paper/research_lab_works/","summary":"The research is about a question with a wrong presupposition, and we need to correct the presupposition and give a correct result.\nCREPE: Open-Domain Question Answering with False Presuppositions üéØ Target The authors introduced CREPE, a QA dataset containing a natural distribution of presupposition failures from online information-seeking forums.\nüì¶ Dataset CREPE, a QA dataset containing a natural distribution of presupposition failures from online information-seeking forums.\nData Source: Reddit, the ELI5 subreddit.","title":"Research_lab_works"},{"content":" Album Name: CHROMAKOPIA Singer: Tyler, The Creator Release Time: 2024-10-28 Record Company: Á¥¢Â∞ºÈü≥‰πê ","permalink":"https://garywy.github.io/en/music/2024-11-08/","summary":"Album Name: CHROMAKOPIA Singer: Tyler, The Creator Release Time: 2024-10-28 Record Company: Á¥¢Â∞ºÈü≥‰πê","title":"CHROMAKOPIA"},{"content":" Album Name: Angel Face Singer: Stephen Sanchez Release Time: 2023-09-22 Record Company: Mercury Records / Republic Records ","permalink":"https://garywy.github.io/en/music/2024-10-10/","summary":" Album Name: Angel Face Singer: Stephen Sanchez Release Time: 2023-09-22 Record Company: Mercury Records / Republic Records ","title":"Angel Face"},{"content":" Album Name: Madvillainy Singer: Madvillain / MF DOOM / Madlib Release Time: 2004-03-24 Record Company: Stones Throw Records ","permalink":"https://garywy.github.io/en/music/2024-10-07/","summary":" Album Name: Madvillainy Singer: Madvillain / MF DOOM / Madlib Release Time: 2004-03-24 Record Company: Stones Throw Records ","title":"Madvillainy"},{"content":" Album Name: Melophobia Singer: Cage the Elephant Release Time: 2013-10-08 Record Company: Á¥¢Â∞ºÈü≥‰πê ","permalink":"https://garywy.github.io/en/music/2024-10-04/","summary":"Album Name: Melophobia Singer: Cage the Elephant Release Time: 2013-10-08 Record Company: Á¥¢Â∞ºÈü≥‰πê","title":"Melophobia"},{"content":" Album Name: Silence Between Songs Singer: Madison Beer Release Time: 2023-09-15 Record Company: Á¥¢Â∞ºÈü≥‰πê ","permalink":"https://garywy.github.io/en/music/2024-10-02/","summary":"Album Name: Silence Between Songs Singer: Madison Beer Release Time: 2023-09-15 Record Company: Á¥¢Â∞ºÈü≥‰πê","title":"Silence Between Songs"},{"content":" Album Name: NEVER ENOUGH Singer: Daniel Caesar Release Time: 2023-04-07 Record Company: Republic Records ","permalink":"https://garywy.github.io/en/music/2024-10-01/","summary":" Album Name: NEVER ENOUGH Singer: Daniel Caesar Release Time: 2023-04-07 Record Company: Republic Records ","title":"NEVER ENOUGH"},{"content":" Album Name: In the Aeroplane Over the Sea Singer: Neutral Milk Hotel Release Time: 1998-02-20 Record Company: Merge Records ","permalink":"https://garywy.github.io/en/music/2024-09-30/","summary":" Album Name: In the Aeroplane Over the Sea Singer: Neutral Milk Hotel Release Time: 1998-02-20 Record Company: Merge Records ","title":"In the Aeroplane Over the Sea"},{"content":"Preface Because I always hit a wall with Dynamic Programming problems, I would like to summarize the solution to Dynamic Programming problems(DP).\nBasic solution to DP problemsÔºö\nInitial State State Transition Equation 1. Linear DP 1. 1 ExampleÔºöLeetcode 300. Longest Increasing Subsequence Given an integer array nums, return the length of the longest strictly increasing subsequence.\nExample 1:\nInput: nums = [10, 9, 2, 5, 3, 7, 101, 18]\nOutput: 4\nExplanation: The longest increasing subsequence is [2, 3, 7, 101], therefore the length is 4.\nExample 2:\nInput: nums = [0, 1, 0, 3, 2, 3]\nOutput: 4\nExample 3:\nInput: nums = [7, 7, 7, 7, 7, 7, 7]\nOutput: 1\n(1) Thought\nInitial State The value of dp[n] in this question can be the length of the longest subsequence among the first n elements. dp[0] = 1 State Transition Equation If there are two elements, it is necessary to determine the size relationship between the first element and the second element. nums=[1, 3], thendp[1] = dp[0] + 1. nums=[3, 1], thendp[1] = dp[0] If there are three elements, and dp[0] and dp[1] are known, it is necessary to determine the size relationship between the third element and all the previous elements. nums=[1, 3, x], first compare 1 to x. If 1 \u0026lt; x, then dp[2] = dp[0] + 1 and so on. Compare 3 to x. If 3 \u0026lt; x, then dp[2] = dp[1] + 1. The process continues in the same way. dp[i] refers to the length of the longest subsequence before the i-th element, so the final result is max(dp). (2) Python Code\ndef longest_increasing_subsequence(nums: list): res = 0 dp = [] for i in range(len(nums)): dp. append(1) for j in range(i): if nums[j] \u0026lt; nums[i]: dp[i] = max(dp[i], dp[j]+1) return max(dp) nums = [10, 9, 2, 5, 3, 7, 101, 18] print(longest_increasing_subsequence(nums)) 1. 2 ExampleÔºöLeetcode 32. Longest Valid Parentheses\nGiven a string containing just the characters \u0026lsquo;(\u0026rsquo; and \u0026lsquo;)\u0026rsquo;, return the length of the longest valid (well-formed) parentheses substring.\nExample 1:\nInput: s = \u0026ldquo;(()\u0026rdquo;\nOutput: 2\nExplanation: The longest valid parentheses substring is \u0026ldquo;()\u0026rdquo;.\nExample 2:\nInput: s = \u0026ldquo;)()())\u0026rdquo;\nOutput: 4\nExplanation: The longest valid parentheses substring is \u0026ldquo;()()\u0026rdquo;.\nExample 3:\nInput: s = \u0026quot;\u0026quot;\nOutput: 0\n(1) Thought\nInitial State\nThe value of dp[n] in this question can be the number of complete parentheses among the first n elements. dp[0] = 0 State Transition Equation ifs[i]==\u0026quot;)\u0026quot;, then we need to determine the previous elements[i-1]==\u0026quot;(\u0026quot;?. ifs[i-1]==\u0026quot;(\u0026quot;, andi\u0026gt;=2, dp[i] = dp[i-2] + 2; elsedp[i] = 2. ifs[i-1]==\u0026quot;)\u0026quot;, then we need to find the previous), which meanss[i-1-dp[i-1]]. Therefore, the above State Transition Equation needs to be modified. Ifi\u0026gt;=2, dp[i] = dp[i-1] + dp[i-2-dp[i-1]] + 2; elsedp[i] = dp[i-1] + 2. (2) Python Code\ndef longest_valid_parentheses(s: str): dp = [0]*(len(s)+1) for i in range(1, len(s)): if s[i] == \u0026#34;)\u0026#34;: if s[i-1] == \u0026#34;(\u0026#34;: if i \u0026gt;= 2: dp[i] = dp[i-2] + 2 else: dp[i] = 2 elif s[i-1-dp[i-1]] == \u0026#34;(\u0026#34; and i \u0026gt; dp[i-1]: if i \u0026gt;= 2: dp[i] = dp[i-1] + dp[i-2-dp[i-1]] + 2 else: dp[i] = dp[i-1] + 2 return max(dp) s = \u0026#34;(()\u0026#34; print(longest_valid_parentheses(s)) 1. 3 Example Leetcode 97. Interleaving String\nGiven strings s1, s2, and s3, find whether s3 is formed by an interleaving of s1 and s2.\nAn interleaving of two strings s and t is a configuration where s and t are divided into n and m substrings respectively, such that:\ns = s1 + s2 + . . . + sn t = t1 + t2 + . . . + tm |n - m| \u0026lt;= 1 The interleaving is s1 + t1 + s2 + t2 + s3 + t3 + . . . or t1 + s1 + t2 + s2 + t3 + s3 + . . . Note: a + b is the concatenation of strings a and b. Example 1:\nInput: s1 = \u0026ldquo;aabcc\u0026rdquo;, s2 = \u0026ldquo;dbbca\u0026rdquo;, s3 = \u0026ldquo;aadbbcbcac\u0026rdquo;\nOutput: true\nExplanation:\nOne way to obtain s3 is:\nSplit s1 into s1 = \u0026ldquo;aa\u0026rdquo; + \u0026ldquo;bc\u0026rdquo; + \u0026ldquo;c\u0026rdquo;, and s2 into s2 = \u0026ldquo;dbbc\u0026rdquo; + \u0026ldquo;a\u0026rdquo;. Interleaving the two splits, we get \u0026ldquo;aa\u0026rdquo; + \u0026ldquo;dbbc\u0026rdquo; + \u0026ldquo;bc\u0026rdquo; + \u0026ldquo;a\u0026rdquo; + \u0026ldquo;c\u0026rdquo; = \u0026ldquo;aadbbcbcac\u0026rdquo;. Since s3 can be obtained by interleaving s1 and s2, we return true.\nExample 2:\nInput: s1 = \u0026ldquo;aabcc\u0026rdquo;, s2 = \u0026ldquo;dbbca\u0026rdquo;, s3 = \u0026ldquo;aadbbbaccc\u0026rdquo;\nOutput: false\nExplanation: Notice how it is impossible to interleave s2 with any other string to obtain s3.\nExample 3:\nInput: s1 = \u0026ldquo;\u0026rdquo;, s2 = \u0026ldquo;\u0026rdquo;, s3 = \u0026quot;\u0026quot;\nOutput: true\n(1) Thought\nInitial State\nThe dp[n][n] in this question refers to the fact that the first i elements of s1 and the first j elements of s2 satisfy the above rule, that is, they can be combined to form s3. dp[0][0] = True State Transition Equation First consider the boundary conditions, which means finddp[i][0]anddp[0][j]. This situation is If the i-th previous element in s1 is the i-th previous element in s3orIf the j-th previous element in s2 is the j-th previous element in s3. dp[i][0] = dp[i-1][0] and s1[i-1] == s3[i-1] (i\u0026gt;=1) dp[0][j] = dp[0][j-1] and s2[j-1] == s3[j-1] (j\u0026gt;=1) And consider the situation of dp[i][j]. There are two propobality, one is the i-th previous element in s1 is the i+j-th previous element in s3, the other one isthe j-th previous element in s2 is the i+j-th previous element in s3. That is, any of the following circumstances apply. dp[i][j] = dp[i-1][j] and s1[i-1] == s3[i+j-1] (i, j\u0026gt;=1) dp[i][j] = dp[i][j-1] and s2[j-1] == s3[i+j-1] (i, j\u0026gt;=1) NoticeThe subscript of the n-th element is n-1. (2) Python Code\ndef interleaving_string(s1: str, s2: str, s3: str): m, n = len(s1), len(s2) if m+n != len(s3): return False dp = [[False]*(n+1) for _ in range(m+1)] dp[0][0] = True for i in range(1, m+1): dp[i][0] = dp[i-1][0] and s1[i-1] == s3[i-1] for j in range(1, n+1): dp[0][j] = dp[0][j-1] and s2[j-1] == s3[j-1] for i in range(1, m+1): for j in range(1, n+1): dp[i][j] = (dp[i-1][j] and s1[i-1] == s3[i+j-1]) or \\ (dp[i][j-1] and s2[j-1] == s3[i+j-1]) return dp[-1][-1] s1 = \u0026#34;aabcc\u0026#34; s2 = \u0026#34;dbbca\u0026#34; s3 = \u0026#34;aadbbcbcac\u0026#34; print(interleaving_string(s1, s2, s3)) 1. 4 Example Leetcode 115. Distinct Subsequences\nGiven two strings s and t, return the number of distinct subsequences of s which equals t. The test cases are generated so that the answer fits on a 32-bit signed integer.\nExample 1:\nInput: s = \u0026ldquo;rabbbit\u0026rdquo;, t = \u0026ldquo;rabbit\u0026rdquo;\nOutput: 3 Explanation:\nAs shown below, there are 3 ways you can generate \u0026ldquo;rabbit\u0026rdquo; from s. rabbbit\nrabbbit\nrabbbit\nExample 2:\nInput: s = \u0026ldquo;babgbag\u0026rdquo;, t = \u0026ldquo;bag\u0026rdquo; Output: 5\nExplanation:\nAs shown below, there are 5 ways you can generate \u0026ldquo;bag\u0026rdquo; from s. babgbag\nbabgbag\nbabgbag\nbabgbag babgbag\n(1) Thought\nInitial State The dp in this question refers to the number of subsequences in which the first i elements of t exist among the first j elements of s. dp[0][j] = 1, which meansthe 0-th elementÔºà‚Äú‚ÄùÔºâin t exist a subsequence in s. State Transition Equation Refer Example1. 3, we can enumerate first. dp[1][0] = 0, dp[2][0] = 0, . . . dp[1][1] = dp[0][0] + dp[0][1] if t[0] == s[0] else dp[0][1] dp[1][2] = dp[0][1] + dp[1][1] if t[0] == s[1] else dp[1][1] dp[2][1] = dp[1][0] + dp[2][0] if t[1] == s[0] else dp[2][0] Then we can get dp[i][j] = dp[i-1][j-1] + dp[i][j-1] if t[i-1] == s[j-1] else dp[i][j-1] (i, j\u0026gt;=1) (2) Python Code\ndef distinct_subsequences(s: str, t: str): dp = [[0]*(len(s)+1) for _ in range(len(t)+1)] for j in range(len(s)+1): dp[0][j] = 1 for i in range(1, len(t)+1): for j in range(1, len(s)+1): dp[i][j] = dp[i-1][j-1] + dp[i][j-1] if t[i-1] == s[j-1] \\ else dp[i][j-1] return dp[-1][-1] s = \u0026#34;rabbbit\u0026#34; t = \u0026#34;rabbit\u0026#34; print(distinct_subsequences(s, t)) 1. 5 Example Leetcode 53. Maximum Subarray\nGiven an integer array nums, find the subarray with the largest sum, and return its sum.\nExample 1:\nInput: nums = [-2, 1, -3, 4, -1, 2, 1, -5, 4]\nOutput: 6\nExplanation: The subarray [4, -1, 2, 1] has the largest sum 6.\nExample 2:\nInput: nums = [1] Output: 1\nExplanation: The subarray [1] has the largest sum 1.\nExample 3:\nInput: nums = [5, 4, -1, 7, 8]\nOutput: 23 Explanation: The subarray [5, 4, -1, 7, 8] has the largest sum 23.\n(1) Thought\nInitial State\nThe dp in this question can refer to the maximum sum of the previous i elements. dp[0] = -inf State Transition Equation dp[i] = max(nums[i-1], nums[i-1]+dp[i-1]) (2) Python Code\ndef maximum_subarray(nums: list): dp = [float(\u0026#34;-inf\u0026#34;) for _ in range(len(nums)+1)] for i in range(1, len(nums)+1): dp[i] = max(nums[i-1], nums[i-1]+dp[i-1]) return max(dp) nums = [-2, 1, -3, 4, -1, 2, 1, -5, 4] print(maximum_subarray(nums)) 1. 6 Example Leetcode 152. Maximum Product Subarray\nGiven an integer array nums, find a subarray that has the largest product, and return the product. The test cases are generated so that the answer will fit in a 32-bit integer.\nExample 1:\nInput: nums = [2, 3, -2, 4]\nOutput: 6 Explanation: [2, 3] has the largest product 6.\nExample 2:\nInput: nums = [-2, 0, -1]\nOutput: 0\nExplanation: The result cannot be 2, because [-2, -1] is not a subarray.\n(1) Thought\nInitial State\nThis question is nearly as same as Example1. 5, but in multiplication, there are cases where negative numbers are multiplied, so it is necessary to set dp_max and dp_min. dp_max[0] = 0, dp_min[0] = 0 State Transition Equation dp_max[i] = max(nums[i-1], nums[i-1]*dp_max[i-1], nums[i-1]*dp_min[i-1]) dp_min[i] = min(nums[i-1], nums[i-1]*dp_max[i-1], nums[i-1]*dp_min[i-1]) (2) Python Code\ndef maximum_product_subarray(nums: list): if len(nums) == 1: return nums[0] dp_max = [0 for _ in range(len(nums)+1)] dp_min = [0 for _ in range(len(nums)+1)] for i in range(1, len(nums)+1): dp_max[i] = max(nums[i-1], nums[i-1]*dp_max[i-1], nums[i-1]*dp_min[i-1]) dp_min[i] = min(nums[i-1], nums[i-1]*dp_max[i-1], nums[i-1]*dp_min[i-1]) return max(dp_max) nums = [2, 3, -2, 4] print(maximum_product_subarray(nums)) 1. 7 Example Leetcode 198. House Robber\nYou are a professional robber planning to rob houses along a street. Each house has a certain amount of money stashed, the only constraint stopping you from robbing each of them is that adjacent houses have security systems connected and it will automatically contact the police if two adjacent houses were broken into on the same night.\nGiven an integer array nums representing the amount of money of each house, return the maximum amount of money you can rob tonight without alerting the police.\nExample 1:\nInput: nums = [1, 2, 3, 1]\nOutput: 4\nExplanation: Rob house 1 (money = 1) and then rob house 3 (money = 3). Total amount you can rob = 1 + 3 = 4.\nExample 2:\nInput: nums = [2, 7, 9, 3, 1]\nOutput: 12\nExplanation: Rob house 1 (money = 2), rob house 3 (money = 9) and rob house 5 (money = 1). Total amount you can rob = 2 + 9 + 1 = 12.\n(1) Thought\nInitial State\nFirst, determine the meaning of dp. This problem can be represented as the maximum value of money in the previous i houses. Therefore, it is one-dimensional and can be determined. dp[0] = 0, dp[1] = nums[0] State Transition Equation The question requires that we cannot steal adjacent houses in a row.\nFor example, when stealing the third house, we must ensure that the house we stole the day before was the first house. Then dp[3] is actually the maximum of the sum of the money in the first and third houses and the money in the second house, and so on. The transfer equation is as follows. dp[i] = max(dp[i-2]+nums[i-1], dp[i-1]) (i\u0026gt;=2) (2) Python Code\ndef house_robber(nums: list): dp = [0 for _ in range(len(nums)+1)] dp[0], dp[1] = 0, nums[0] for i in range(2, len(nums)+1): dp[i] = max(dp[i-2]+nums[i-1], dp[i-1]) return dp[-1] nums = [1, 2, 3, 1] print(house_robber(nums)) 1. 8 Example Leetcode 213. House Robber II\nYou are a professional robber planning to rob houses along a street. Each house has a certain amount of money stashed. All houses at this place are arranged in a circle. That means the first house is the neighbor of the last one. Meanwhile, adjacent houses have a security system connected, and it will automatically contact the police if two adjacent houses were broken into on the same night.\nGiven an integer array nums representing the amount of money of each house, return the maximum amount of money we can rob tonight without alerting the police.\nExample 1:\nInput: nums = [2, 3, 2]\nOutput: 3\nExplanation: You cannot rob house 1 (money = 2) and then rob house 3 (money = 2), because they are adjacent houses.\nExample 2:\nInput: nums = [1, 2, 3, 1]\nOutput: 4\nExplanation: Rob house 1 (money = 1) and then rob house 3 (money = 3). Total amount you can rob = 1 + 3 = 4.\nExample 3:\nInput: nums = [1, 2, 3]\nOutput: 3\n(1) Thought\nInitial State\nFirst, determine the meaning of dp. This problem can be represented as the maximum value of money in the previous i houses. Therefore, it is one-dimensional. dp[0] = 0, dp[1] = nums[0] State Transition Equation The question requires that we cannot steal adjacent houses in a row.\nFor example, when stealing the third house, we must ensure that the house we stole the day before was the first house. Then dp[3] is actually the maximum of the sum of the money in the first and third houses and the money in the second house, and so on. The transfer equation is as follows. dp[i] = max(dp[i-2]+nums[i-1], dp[i-1]) (i\u0026gt;=2) The above is totally same as Example1. 8, however, the houses at the beginning and end are arranged in a continuous line. At this point, we can divide the calculation into two parts. If there are n houses, we can first calculate the first n-1 houses, and then calculate the last n-1 houses, ensuring that the first and last are not consecutive, and then take the maximum value.\n(2) Python Code\ndef house_robber(nums: list): dp = [0 for _ in range(len(nums)+1)] dp[0], dp[1] = 0, nums[0] for i in range(2, len(nums)+1): dp[i] = max(dp[i-2]+nums[i-1], dp[i-1]) return dp[-1] def house_robber2(nums: list): return max(house_robber(nums[1:]), house_robber(nums[:-1])) nums = [2, 3, 2] print(house_robber2(nums)) 1. 9 Example Leetcode 72. Edit Distance\nGiven two strings word1 and word2, return the minimum number of operations required to convert word1 to word2.\nYou have the following three operations permitted on a word:\nInsert a character Delete a character Replace a character Example 1:\nInput: word1 = \u0026ldquo;horse\u0026rdquo;, word2 = \u0026ldquo;ros\u0026rdquo;\nOutput: 3\nExplanation: horse -\u0026gt; rorse (replace \u0026lsquo;h\u0026rsquo; with \u0026lsquo;r\u0026rsquo;) rorse -\u0026gt; rose (remove \u0026lsquo;r\u0026rsquo;)\nrose -\u0026gt; ros (remove \u0026rsquo;e\u0026rsquo;)\nExample 2:\nInput: word1 = \u0026ldquo;intention\u0026rdquo;, word2 = \u0026ldquo;execution\u0026rdquo;\nOutput: 5\nExplanation:\nintention -\u0026gt; inention (remove \u0026rsquo;t\u0026rsquo;)\ninention -\u0026gt; enention (replace \u0026lsquo;i\u0026rsquo; with \u0026rsquo;e\u0026rsquo;)\nenention -\u0026gt; exention (replace \u0026rsquo;n\u0026rsquo; with \u0026lsquo;x\u0026rsquo;)\nexention -\u0026gt; exection (replace \u0026rsquo;n\u0026rsquo; with \u0026lsquo;c\u0026rsquo;)\nexection -\u0026gt; execution (insert \u0026lsquo;u\u0026rsquo;)\n(1) Thought\nInitial State\nFirst determine the meaning of dp. This question can be the edit distance between the first i elements of word1 and the first j elements of word2. Therefore, it is two-dimensional, and the initial state can be determined. dp[0][0] = 0, dp[i][0] = i, dp[0][j] = j State Transition Equation The topic can be simply described as follows: find the minimum of the insertion cost, deletion cost and replacement cost. Inserting an element or deleting an element requires one operation, means the insertion cost and deletion cost are both 1. If the i-th element in word1 is equal to the j-th element in word2, then no replacement is required, otherwise one operation is required, means the replacement cost is 1 or 0. insert_cost = 1, delete_cost = 1 replace_cost = 0 if word1[i-1] == word2[j-1] else 1 dp[i][j] = min(dp[i-1][j]+1, dp[i][j-1]+1, dp[i-1][j-1] + replace_cost) (i, j\u0026gt;=1) (2) Python Code\ndef edit_distance(word1: str, word2: str): dp = [[0]*(len(word2)+1) for _ in range(len(word1)+1)] for i in range(len(word1)+1): dp[i][0] = i for j in range(len(word2)+1): dp[0][j] = j for i in range(1, len(word1)+1): for j in range(1, len(word2)+1): replace_cost = 0 if word1[i-1] == word2[j-1] else 1 dp[i][j] = min(dp[i-1][j]+1, dp[i][j-1]+1, dp[i-1][j-1]+replace_cost) return dp[-1][-1] word1 = \u0026#34;horse\u0026#34; word2 = \u0026#34;ros\u0026#34; print(edit_distance(word1, word2)) ","permalink":"https://garywy.github.io/en/posts/study/dp_question/","summary":"Preface Because I always hit a wall with Dynamic Programming problems, I would like to summarize the solution to Dynamic Programming problems(DP).\nBasic solution to DP problemsÔºö\nInitial State State Transition Equation 1. Linear DP 1. 1 ExampleÔºöLeetcode 300. Longest Increasing Subsequence Given an integer array nums, return the length of the longest strictly increasing subsequence.\nExample 1:\nInput: nums = [10, 9, 2, 5, 3, 7, 101, 18]\nOutput: 4","title":"DP_Question"},{"content":" Album Name: Room On Fire Singer: The Strokes Release Time: 2003-10-28 Record Company: Á¥¢Â∞ºÈü≥‰πê ","permalink":"https://garywy.github.io/en/music/2024-09-29/","summary":"Album Name: Room On Fire Singer: The Strokes Release Time: 2003-10-28 Record Company: Á¥¢Â∞ºÈü≥‰πê","title":"Room On Fire"},{"content":" Album Name: Random Access Memories Singer: Daft Punk Release Time: 2013-05-17 Record Company: Á¥¢Â∞ºÈü≥‰πê ","permalink":"https://garywy.github.io/en/music/2024-09-28/","summary":"Album Name: Random Access Memories Singer: Daft Punk Release Time: 2013-05-17 Record Company: Á¥¢Â∞ºÈü≥‰πê","title":"Random Access Memories"},{"content":"Preface This article mainly summarizes the common syntax of Markdown, so that you can write Markdown files better by yourself.\n1. Basic Grammer 1.1 Title Use# to create a title. The number of # you use indicates the number of heading levels.\nMarkdown Display # title1 title1 # title2 title2 # title3 title3 1.2 Line break Add 2 or more spaces after the text, or add a blank line (press enter twice).\n1.3 Emphasize Blod\n**text**or__text__ Italic\n*text*or_text_ *** Blod and Italic***\n***text***or___text___ _and*can be used interchangeably. 1.4 Quote Single Quotation\n\u0026gt; Hello World! Hello World!\nMultiple Quotation \u0026gt; Hello \u0026gt; \u0026gt; World! Hello\nWorld!\nBlockquote \u0026gt; Hello \u0026gt; \u0026gt;\u0026gt; World! Hello\nWorld!\nQuotation with other elements \u0026gt; _Hello_ \u0026gt; \u0026gt;\u0026gt; **World**! Hello\nWorld!\n1.5 List Ordered List 1. First 2. Second 1. S1 2. S2 3. Third First Second S1 S2 Third Unordered List\n+,-and*can be used interchangeably. - First - Second + S1 + S2 - Third First Second S1 S2 Third 1.6 Code Block Fence code (the type of code can be defined and the code is highlighted), using```or~~~.\n```python print(Hello World!) ``` print(Hello World!) You can use `or `` for text.\n`Hello` ``World`` Hello World 1.7 Dividing Line ---,***and___can represent dividing line.\n--- *** ___ 1.8 Link Link with title This is a [link](https://www.google.com/) This is a Link\nWebsite \u0026lt;https://www.google.com/\u0026gt; https://www.google.com/\n1.9 Picture Picture Display ![title](../img/display.jpeg) Add link for picture [![title](../img/display.jpeg)](https://www.google.com/) 1.10 Escape Character Escape Character is \\„ÄÇ\n\\# title # title\n","permalink":"https://garywy.github.io/en/posts/study/markdown_study_notes/","summary":"Preface This article mainly summarizes the common syntax of Markdown, so that you can write Markdown files better by yourself.\n1. Basic Grammer 1.1 Title Use# to create a title. The number of # you use indicates the number of heading levels.\nMarkdown Display # title1 title1 # title2 title2 # title3 title3 1.2 Line break Add 2 or more spaces after the text, or add a blank line (press enter twice).","title":"Markdown Study Notes"},{"content":"1. Preface Originally, I was required to create a web service for a research project, but I accidentally discovered Hugo. So I took this opportunity to use Hugo to make my blog. This article mainly covers the process of setting up a personal blog, some of the problems I encountered and the solutions, I hope it will be helpful to you.\nSince I am using mac os, there may be some differences from the Windows system.\n2. Hugo 2.1 Hugo installation First, use the terminal to install Hugo.\nbrew install hugo Homebrew is a special tool for mac os, so if you don\u0026rsquo;t have brew, you need to install homebrew (mac os) in advance.\n2.2 Use Hugo to create a simple blog First, use the following command to create a new folder for Hugo.\nhugo new site foldername foldername fill in any name you like. Note that all future operations need to be performed under this path. After the creation is successful, go to the path and you will find 9 folders.\narchetypes\nThis folder only has a default.md file, which only contains the header. Its main function is that every time a new md file is created, it will be created according to the default format set in this file. +++ title = \u0026#39;{{ replace .File.ContentBaseName ‚Äú-‚Äù ‚Äú ‚Äò | title }}‚Äô # File name when created date = {{ .Date }} # Current date and time draft = true # Whether it is a draft +++ The following code is a method for creating a new md file in Hugo. The blog is customized in it, and after the creation is successful, the title in the above code will become blog.\nhugo new blog.md content The folder is empty and needs to be added by the user. For example, if you want to have a section about learning in your blog, you can create a folder called learning in this folder. hugo.toml This file is the Hugo configuration file and is very important. Since the toml syntax is more troublesome, and most of the information found is to convert the toml file to a yaml file, it is recommended to use a configuration file in yaml format. Details will be provided later. layouts\nThis folder is empty before a theme is added. After a theme is added, it mostly contains html files that are used to display various pages. themes\nThis folder is saved in this folder after adding the theme, and usually no changes need to be made. assets\nUsed to store css files. data\nI haven\u0026rsquo;t used it and I\u0026rsquo;m not sure what it does. i18n\nI haven\u0026rsquo;t used it either. static\nThis folder can be used to store images. The above is an introduction to the relevant files. There is no need to remember them carefully, and you can come back later if necessary.\nNext, set the theme. Go to Hugo Themes and choose a theme you like. The theme I chose is PaperMod, the first theme on the website. Note that the configuration files for each theme are different, so you need to check the documentation for that theme in detail. After choosing your favorite theme, the word download will appear. Click download to go to the GitHub interface. Copy the GitHub address and enter the following code in the terminal:\ngit clone theme_address Replace theme_address with the GitHub address you copied.\nAfter the download is successful, you will find a new folder under your root folder. For example, after the PaperMod download is successful, a folder named hugo-PaperMod will appear. Move the entire folder to the themes folder. After that, you don\u0026rsquo;t need to do anything with the themes folder. Then add the following content to your configuration file, which is the hugo.toml file.\ntheme = \u0026#39;theme_name\u0026#39; #theme = \u0026#39;hugo-PaperMod\u0026#39; The yaml syntax is as follows:\ntheme: theme_name #theme: hugo-PaperMod If you are using the PaperMod theme, I recommend referring to hugoÂçöÂÆ¢Êê≠Âª∫ | PaperMod‰∏ªÈ¢ò for configuration file settings. Including related operations in the content folder, you can also refer to the above link, which is very clear.\n2.3 Hugo startup Hugo has two startup methods.\nhugo server hugo server -D Both commands can start the blog. After successful startup, copy the URL prompted to access the blog locally. The difference between the two commands is whether to display the md file with the header filedraft: true or not. hugo server cannot display files with the draft: true, so you need to be aware of this. Therefore, you can change the set to false in the default file, which will make things a bit easier. But if you create some files that do not want anyone to see that, then you can set draft: true(I strongly recommend this).\nAfter completing the above in order, you can use Hugo to complete your own static blog. In addition to the above links, you can also refer to the content of this blog Hugo + PaperMod to build a technical blog.\n2.4 Problems and Solutions 2.4.1 Multilingual In the configuration file ‚Äúhugo.yaml‚Äù, you can configure multiple languages. For example, my configuration file has both Chinese and English.\nlanguages: en: languageName: ‚ÄúEnglish‚Äù contentDir: content/English weight: 1 profileMode: enabled: true title: Gary\u0026#39;s House subtitle: ‚ÄùIt\u0026#39;s happy to see you!‚Äù imageUrl: ‚Äúimg/me.jpg‚Äù #The image is stored in static/img/me.gif imageTitle: imageWidth: 150 imageHeight: 150 buttons: - name: üßë‚ÄçüíªTech url: posts/tech ... zh: languageName: ‚ÄúChinese‚Äù contentDir: content/Chinese weight: 1 profileMode: enabled: true title: Gary\u0026#39;s House subtitle: ‚ÄúNice to meet you!‚Äù imageUrl: ‚Äòimg/me.jpg‚Äô #The image is stored in static/img/me.gif imageTitle: imageWidth: 150 imageHeight: 150 buttons: - name: üßë‚ÄçüíªÊäÄÊúØ url: posts/tech/ ... In order to be multilingual, you need to create multiple folders under the content folder to store the content. I created two folders, English and Chinese in the content folder. Then place the multilingual files in their own folders.\n2.4.2 Search page The main function of the search page is to provide an internal search. The PaperMod theme provides search.html, so we only need to do two things.\nCreate search.md in the same path as the posts folder and change the content of the header file. +++ title = ‚ÄúSearch‚Äù draft = false layout = ‚Äùsearch‚Äù +++ Then add the setting to the configuration file hugo.yaml. - identifier: search name: üîçSearch url: search weight: 1 identifier and name can be changed to your liking, but url must be set in search.\nReplenishment: If you want to display the current time on the search page, you need to go to layouts/_default/search.html. Add the following content to line 6 of your own search.html file to display the time on the search interface.\n\u0026lt;header class=‚Äúpage-header‚Äù\u0026gt; \u0026lt;h1\u0026gt;{{- (printf ‚Äú%s\u0026amp;nbsp;‚Äù .Title ) | htmlUnescape -}} ... \u0026lt;/h1\u0026gt; \u0026lt;p class=‚Äúpost-date‚Äù\u0026gt;{{ now.Format ‚Äú2006-01-02‚Äù }}\u0026lt;/p\u0026gt; 3. GitHub Pages deployment 3.1 Preliminary preparations First, you need to log in to your GitHub account and create two repositories. One is a private repository with a custom name, mine is my_blog, and the other is a public repository with the name username.github.io, where username is your GitHub username. This repository is mainly used to update and display blog content. You can add a readme file with any content when creating the repository. Follow the steps below for the public repository. Remember to upload content to the master branch.\n3.2 Uploading local files to a GitHub private repository Refer to the article Uploading files to GitHub via the terminal to upload files to a GitHub repository.\nFirst go to the root path of Hugo (the folder contains all Hugo files), and then upload the files in the following order.\ngit init git add . git commit -m ‚Äúcomment‚Äù git remote rm origin git remote add origin private_repository_url git push origin master The above operation should successfully upload all files to the private repository.\nThe errors I encountered and the solutions:\nThe source reference specification master does not match. git branch -M master Changes not yet staged for commit: modify not yet added to commit (use ‚Äúgit add‚Äù and/or ‚Äúgit commit -a‚Äù). git add --all git commit -m ‚Äúcomment‚Äù git remote rm origin git remote add origin private_repository_url git push origin master 3.3 Upload the local public files to the GitHub public repository. First, the name of the public repository must be username.github.io. The main process for uploading is:\nCreate a public folder in the root folder of the local Hugo. hugo -F --cleanDestinationDir Clone the GitHub public repository to the root path of this hugo, and add all files in public and hugo.yaml (very important!) to the local repository. git clone public_repository_url cp hugo.yaml username.github.io/ mv public/* username.github.io/ cd username.github.io Upload the local repository to GitHub git add . git commit -m ‚Äúrebuild_site $(date)‚Äù git push origin master The above is the process for the first upload. Subsequent uploads can be automated by executing the script. After completing the above, you can run Hugo locally and try it with the address username.github.io. If it is successful, it proves to be feasible.\nSet up a script file to facilitate updating content each time. The script file can be saved in the root folder of Hugo with any name. Mine is `issue.sh'. hugo -F --cleanDestinationDir cp hugo.yaml public/ rm -rf username.github.io/* mv public/* username.github.io/ rm -rf public cd username.github.io/ git add . git commit -m ‚Äúrebuild_site $(date)‚Äù git push -u origin +master All the above username.github.io needs to be replaced with your own public repository name. The ssh file is executed as follows:\n./issue.sh If the above is successfully completed, you can proceed to deploy GitHub Actions.\n3.4 GitHub Actions deployment This deployment is mainly to allow the static blog to be accessed by others, and is deployed on the GitHub website.\nGenerate a token First, you need to set a key. Go to your personal homepage, click Settings, then find Developer Settings at the bottom left, and follow the instructions on the page. Click generate token to create a key and must remember the token that starts with ghp_.\nAdd token Next, add the token you just got to the location shown below. The name can be MY_BLOG. Add workflows First, make sure that the current branch is master. Then, execute the following steps in the order shown below to generate a hugo.yml file. The content of the hugo.yml file is as follows:\nname: pages-auto-build-deploy on: # workflow_dispatch: push: branches: - main jobs: build-and-deploy: runs-on: ubuntu-latest steps: - uses: actions/checkout@v2 with: submodules: true fetch-depth: 0 - name: Setup Hugo uses: peaceiris/actions-hugo@v2 with: hugo-version: \u0026#39;0.130.0\u0026#39; #You need to change this according to your own Hugo version. You can view the version with the command hugo version. extended: true #Determined based on the query result of hugo version. - name: Build Hugo run: hugo - name: Deploy uses: peaceiris/actions-gh-pages@v3 with: GitHub_token: ${{ secrets.MY_BLOG }} # MY_BLOG is the token name just added publish_dir: ./public commit_message: ${{ GitHub.event.head_commit.message }} After completing all the above operations, you can go to GitHub\u0026rsquo;s top and click Actions to check whether the workflow has been started successfully. After a successful startup, anyone can directly access your blog using username.github.io.\nReference links I am kind of stupid, so I have only completed the basic settings of my blog after referring to the blogs and articles of many great bloggers. You can refer to the following links for a lot of additional content.\nHugo blog setup | PaperMod theme Hugo + PaperMod setup technical blog Deploying a hugo blog to github Hugo+Github Pages+Github Action blog plan 3 ‚Äì Configuring Github Action to enable automatic publishing ","permalink":"https://garywy.github.io/en/posts/tech/hugo_githubpages/","summary":"1. Preface Originally, I was required to create a web service for a research project, but I accidentally discovered Hugo. So I took this opportunity to use Hugo to make my blog. This article mainly covers the process of setting up a personal blog, some of the problems I encountered and the solutions, I hope it will be helpful to you. Since I am using mac os, there may be","title":"Hugo_githubpages"},{"content":"NAME: Gary GENDER: Male EMAIL: gary510wyl@gmail.com OCCUPATION: Student ","permalink":"https://garywy.github.io/en/about/","summary":"NAME: Gary GENDER: Male EMAIL: gary510wyl@gmail.com OCCUPATION: Student ","title":"About"}]